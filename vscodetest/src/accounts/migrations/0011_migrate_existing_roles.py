# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-27 20:35
from __future__ import unicode_literals

from django.db import migrations


PERMISSIONS = [
    {
        'name': 'order.approve',
        'label': 'Approve Orders',
        'description': 'Allows the user to approve and deny orders'
    },
    {
        'name': 'order.view',
        'label': 'View Orders',
        'description': ''
    },
    {
        'name': 'order.submit',
        'label': 'Submit Orders',
        'description': 'Allows the user to order servers and blueprints'
    },
    {
        'name': 'order.change_attributes',
        'label': 'Change Order Attributes',
        'description': 'Change the order name'
    },
    {
        'name': 'server.view',
        'label': 'View Servers',
        'description': ''
    },
    {
        'name': 'server.control_power',
        'label': 'Control Power on Servers',
        'description': 'Power on, power off, reboot, and pause servers'
    },
    {
        'name': 'server.manage_snapshots',
        'label': 'Manage Snapshots',
        'description': 'Create, delete, and restore from server snapshots'
    },
    {
        'name': 'server.manage_disks',
        'label': 'Manage Disks',
        'description': ''
    },
    {
        'name': 'server.manage_nics',
        'label': 'Manage NICs',
        'description': ''
    },
    {
        'name': 'server.change_resources',
        'label': 'Change Resources',
        'description': 'Change CPU & memory on VMs'
    },
    {
        'name': 'server.console',
        'label': 'Console',
        'description': ''
    },
    {
        'name': 'server.remote_terminal',
        'label': 'Remote Terminal',
        'description': 'SSH/RDP access to servers from the CloudBolt UI'
    },
    {
        'name': 'server.manage_applications',
        'label': 'Manage Apps',
        'description': '[Un]Install config manager applications on servers'
    },
    {
        'name': 'server.change_attributes',
        'label': 'Change Attributes',
        'description': 'Change env, group, OS family, and OS build associates for servers'
    },
    {
        'name': 'server.manage_labels',
        'label': 'Manage Labels',
        'description': 'Add and remove labels on servers'
    },
    {
        'name': 'server.manage_parameters',
        'label': 'Manage Server Parameters',
        'description': 'Add, remove, and modify parameters (AKA custom fields) on servers'
    },
    {
        'name': 'server.delete',
        'label': 'Delete Server',
        'description': ''
    },
    {
        'name': 'server.manage_credentials',
        'label': 'Manage Server Credentials',
        'description': 'Allows the user to view and manage the credentials used '
                       'to execute remote actions on servers.'
    },
    {
        'name': 'server.view_handler_specific_details',
        'label': 'View Handler-Specific Details',
        'description': 'Allows the user to see resource handler specific details '
                       'for servers. Ex. The VMware cluster, the AWS region, etc.'
    },
    {
        'name': 'server.all_actions',
        'label': 'Run All Server Actions',
        'description': 'Allows the user to execute any Server Action available '
                       'on the server'
    },
    {
        'name': 'service.view',
        'label': 'View Services',
        'description': ''
    },
    {
        'name': 'service.change_attributes',
        'label': 'Change Service Attributes',
        'description': ''
    },
    {
        'name': 'service.manage_parameters',
        'label': 'Manage Service Parameters',
        'description': 'Add, remove, and modify parameters (AKA custom fields) on services'
    },
    {
        'name': 'service.all_actions',
        'label': 'Run All Service Actions',
        'description': 'Allows the user to execute any Service Action available '
                       'on the service'
    },
    {
        'name': 'group.view',
        'label': 'View Group Details',
        'description': ''
    },
    {
        'name': 'group.change_attributes',
        'label': 'Change Group Attributes',
        'description': ''
    },
    {
        'name': 'group.delete',
        'label': 'Delete Group',
        'description': ''
    },
    {
        'name': 'group.create_subgroup',
        'label': 'Create Subgroup',
        'description': ''
    },
    {
        'name': 'group.manage_members',
        'label': 'Manage Group Memberships',
        'description': ''
    },
    {
        'name': 'group.manage_networks',
        'label': 'Manage Group Networks',
        'description': ''
    },
    {
        'name': 'group.manage_parameters',
        'label': 'Manage Group Parameters',
        'description': ''
    },
    {
        'name': 'group.manage_subgroup_quotas',
        'label': 'Manage Subgroup Quotas',
        'description': 'Allows the user to manage quotas for subgroups of this group'
    },
    {
        'name': 'blueprint.manage',
        'label': 'Manage Blueprints',
        'description': ''
    },
]

INITIAL_ROLES = [
    {
        'name': 'requestor',
        'label': 'Requestor',
        'description': 'May submit provisioning, modification, and decommissioning '
                       'orders in this group',
        'assignable_to_users': True,
        'permissions': [
            'order.submit',
        ]
    },
    {
        'name': 'viewer',
        'label': 'Viewer',
        'description': 'Basic permission to view group servers, members, and '
                       'activity',
        'assignable_to_users': True,
        'permissions': [
            'order.view',
            'server.view',
            'service.view',
            'group.view',
        ]
    },
    {
        'name': 'approver',
        'label': 'Approver',
        'description': 'May approve or deny orders for this group',
        'assignable_to_users': True,
        'permissions': [
            'order.view',
            'order.change_attributes',
            'order.approve',
        ]
    },
    {
        'name': 'resource_admin',
        'label': 'Resource Admin',
        'description': 'Manages technical configuration for this group, '
                       'such as parameters and networks. Can also manage '
                       'blueprints and servers.',
        'assignable_to_users': True,
        'permissions': [
            'order.submit',
            'server.view',
            'server.control_power',
            'server.manage_snapshots',
            'server.manage_disks',
            'server.manage_nics',
            'server.change_resources',
            'server.console',
            'server.remote_terminal',
            'server.manage_applications',
            'server.change_attributes',
            'server.manage_labels',
            'server.manage_parameters',
            'server.delete',
            'server.manage_credentials',
            'server.view_handler_specific_details',
            'server.all_actions',
            'service.view',
            'service.change_attributes',
            'service.manage_parameters',
            'service.all_actions',
            'blueprint.manage',
            'group.view',
            'group.change_attributes',
            'group.manage_networks',
            'group.manage_parameters',
        ]
    },
    {
        'name': 'group_admin',
        'label': 'Group Admin',
        'description': 'Manages organizational aspects of this group: '
                       'membership and permissions, subgroup creation and '
                       'management, and delegation of responsibilities to '
                       'other group members',
        'assignable_to_users': True,
        'permissions': [
            'group.view',
            'group.change_attributes',
            'group.create_subgroup',
            'group.delete',
            'group.manage_members',
            'group.manage_subgroup_quotas',
        ]
    },
]

POWERFUL_REQUESTOR_PERMS = [
    'server.control_power',
    'server.manage_snapshots',
    'server.manage_disks',
    'server.manage_nics',
    'server.change_resources',
    'server.console',
    'server.remote_terminal',
    'server.manage_applications',
    'server.change_attributes',
    'server.manage_labels',
    'server.manage_parameters',
    'server.delete',
    'server.manage_credentials',
    'server.view_handler_specific_details',
    'server.all_actions',
]


def migrate_existing_roles(apps, schema_editor):
    CBPermission = apps.get_model('accounts', 'CBPermission')
    Role = apps.get_model('accounts', 'Role')
    Group = apps.get_model('accounts', 'Group')
    GroupRoleMembership = apps.get_model('accounts', 'GroupRoleMembership')
    GlobalPreferences = apps.get_model('utilities', 'GlobalPreferences')

    # Create permissions before creating initial roles, since cb_objects may
    # not have run yet
    for perm_dict in PERMISSIONS:
        CBPermission.objects.get_or_create(name=perm_dict['name'], defaults=perm_dict)

    # Create initial roles that correspond to old roles
    for role_dict in INITIAL_ROLES:
        perms = CBPermission.objects.filter(name__in=role_dict.pop('permissions'))
        role, created = Role.objects.get_or_create(
            name=role_dict['name'], defaults=role_dict)
        role.permissions.add(*perms)

    # Grant more perms to requestors if powerful_requestors is enabled
    role = Role.objects.get(name='requestor')
    gp = GlobalPreferences.objects.first()
    if gp and gp.powerful_requestors:
        perms = CBPermission.objects.filter(name__in=POWERFUL_REQUESTOR_PERMS)
        role.permissions.add(*perms)

    # Create GroupRoleMembership for each existing membership
    memberships = []
    for group in Group.objects.all():
        for old_role, new_role in [
                ('requestor', 'requestor'),
                ('viewer', 'viewer'),
                ('approver', 'approver'),
                ('resource_admin', 'resource_admin'),
                ('user_admin', 'group_admin')]:
            role = Role.objects.get(name=new_role)
            profiles = getattr(group, "{}s".format(old_role)).all()
            memberships.extend([
                GroupRoleMembership(profile=profile, role=role, group=group)
                for profile in profiles])

    GroupRoleMembership.objects.bulk_create(memberships)


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0010_auto_20170420_0048'),
        ('utilities', '0005_globalpreferences_powerful_requestors'),
    ]

    operations = [
        migrations.RunPython(migrate_existing_roles)
    ]
