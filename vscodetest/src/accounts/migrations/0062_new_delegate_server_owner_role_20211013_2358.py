# Generated by Django 3.2.5 on 2021-10-13 23:58

from django.db import migrations


# Copied from cb_minimal. It's safe to assume the permissions exist even if create_objects
# hasn't run yet, because I confirmed they would all be created by earlier migrations in this app
ROLE_DICT = {
    "name": "delegate_server_owner",
    "label": "Delegate Server Owner",
    "description": (
        "Can be assigned to Users in a Server's management Groups, "
        "in order to provide additional Users with permissions "
        "comparable to the Owner of that Server."
    ),
    "assignable_to_users": True,
    "permissions": [
        "server.view",
        "server.control_power",
        "server.manage_snapshots",
        "server.add_disks",
        "server.remove_disks",
        "server.resize_disks",
        "server.manage_nics",
        "server.change_resources",
        "server.console",
        "server.remote_terminal",
        "server.manage_applications",
        "server.change_attributes",
        "server.manage_labels",
        "server.manage_parameters",
        "server.delete",
        "server.manage_credentials",
        "server.view_handler_specific_details",
        "server.all_actions",
        "server.view_power_schedule",
        "server.manage_power_schedule",
    ],
}


def make_new_role(apps, schema_editor):
    """
    Create the "Delegate Server Owner" Role as defined in cb_minimal, since we don't
    create our Group/"Default" Roles via create_objects
    """
    CBPermission = apps.get_model('accounts', 'CBPermission')
    Role = apps.get_model('accounts', 'Role')

    perms = CBPermission.objects.filter(name__in=ROLE_DICT.pop('permissions'))
    role, created = Role.objects.get_or_create(
        name=ROLE_DICT['name'], defaults=ROLE_DICT)
    role.permissions.add(*perms)


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0061_userprofile_legal_notice_seen'),
    ]

    operations = [
        migrations.RunPython(make_new_role, migrations.RunPython.noop)
    ]
