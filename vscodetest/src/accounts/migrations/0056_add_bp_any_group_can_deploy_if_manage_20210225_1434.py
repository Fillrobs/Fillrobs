# Generated by Django 2.2.16 on 2021-02-25 14:34

from django.db import migrations


# Copied from cb_minimal because migrations run 1st
NEW_PERM = {
    "name": "blueprint.any_group_can_deploy",
    "label": "Configure Blueprints so Any Group Can Deploy",
    "description": (
        "Allows the user to modify the setting on a Blueprint that makes it "
        "available to be deployed by any and all Groups on the instance, both "
        "current and future. Exercise caution with this permission, since "
        "it can have a broad impact"
    ),
}


def update_roles(apps, schema_editor):
    """
    As part of adding the new blueprint.any_group_can_deploy permission and using
    it to control that setting instead of the generic blueprint.manage, we want
    to avoid unpleasant surprises for existing customers during rollout so add
    the new permission to any existing Role that currently has blueprint.manage,
    so noone immediately loses the ability to configure the setting
    NOTE: this is different from new customers, where by default no Roles will have
    the new permission OOTB
    """
    CBPermission = apps.get_model('accounts', 'CBPermission')
    Role = apps.get_model('accounts', 'Role')

    new_perm, __ = CBPermission.objects.get_or_create(name=NEW_PERM['name'], defaults=NEW_PERM)

    roles = Role.objects.filter(permissions__name="blueprint.manage")

    for role in roles:
        role.permissions.add(new_perm)


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0055_userprofile_widgets_json'),
    ]

    operations = [
        migrations.RunPython(update_roles, migrations.RunPython.noop),
    ]
