# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-12-29 16:23
from __future__ import unicode_literals

from django.db import migrations


# copied from cb_minimal
PERMISSIONS = [
    {
        'name': 'server.add_disks',
        'label': 'Add Disks',
        'description': 'Allows the user to add disks to a server'
    },
    {
        'name': 'server.remove_disks',
        'label': 'Remove Disks',
        'description': 'Allows the user to remove disks from a server'
    },
    {
        'name': 'server.resize_disks',
        'label': 'Resize Disks',
        'description': 'Allows the user to resize disks on a server'
    },
]


def update_roles_with_manage_disk_permissions(apps, schema_editor):
    """
    Split the manage_disks CBPermission into three separate permissions:
    1. server.add_disks
    2. server.remove_disks
    3. server.delete_disks

    For each role that currently has the server.manage_disks permission:
    1. Add the three permissions listed above
    2. Remove the deprecated server.manage_disks permission from the role
    """
    CBPermission = apps.get_model('accounts', 'CBPermission')
    Role = apps.get_model('accounts', 'Role')

    for perm_dict in PERMISSIONS:
        CBPermission.objects.get_or_create(name=perm_dict['name'], defaults=perm_dict)

    try:
        manage_disks = CBPermission.objects.get(name='server.manage_disks')
    except CBPermission.DoesNotExist:
        return  # nothing to do if the manage disks permission does not exist

    roles = Role.objects.filter(permissions__in=[manage_disks])

    for role in roles:
        role.permissions.add(CBPermission.objects.get(name='server.add_disks'))
        role.permissions.add(CBPermission.objects.get(name='server.remove_disks'))
        role.permissions.add(CBPermission.objects.get(name='server.resize_disks'))
        role.permissions.remove(manage_disks)

    # we delete the deprecated manage_disks to prevent confusion about a permission
    # that doesn't do anything
    manage_disks.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0021_userprofile_custom_field_values'),
    ]

    operations = [
        migrations.RunPython(update_roles_with_manage_disk_permissions, migrations.RunPython.noop),
    ]
