# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-02-01 21:19
from __future__ import unicode_literals

from django.db import migrations


def set_model_name_on_tags(apps, schema_editor):
    """
    Migration changes CloudBoltTag.model_name from the default 'server' to the _meta.model_name of
    the models this tag is actually on.  The only other tags in the product during the time of this
    migration would be on CIT tests or FunctionalTestParameters, in which case we want model_name
    to be 'cittest'.
    """
    CloudBoltTag = apps.get_model('tags', 'CloudBoltTag')

    for cb_tag in CloudBoltTag.objects.all():
        tagged_items = cb_tag.tags_taggeditem_items.all()
        unique_model_names = list(set([ti.content_type.model for ti in tagged_items]))

        if len(unique_model_names) == 0:
            # This tag is not actually used. It's fine to leave it as a server tag, though this
            # means it'll be available for users to choose when adding labels to their servers.
            continue

        elif len(unique_model_names) == 1:
            cb_tag.model_name = unique_model_names[0]

        else:
            # This tag is used on multiple models, but actually only has one use case in the UI. We
            # don't expect any tags to actually be associated with multiple types of things,
            # because we filtered them in the UI previously (e.g., server tags didn't show on CIT).
            # However, it was observed that for tags related to CITTests, they were sometimes
            # associated with both the CITTest and FunctionalTestParameters models.
            if 'cittest' in unique_model_names and 'functionaltestparameters' in unique_model_names:
                cb_tag.model_name = 'cittest'
            else:
                # Unexpected, so leave the default 'server' model_name
                continue

        cb_tag.save()


class Migration(migrations.Migration):

    dependencies = [
        ('tags', '0003_auto_20180126_1810'),
    ]

    operations = [
        migrations.RunPython(set_model_name_on_tags, migrations.RunPython.noop)
    ]
