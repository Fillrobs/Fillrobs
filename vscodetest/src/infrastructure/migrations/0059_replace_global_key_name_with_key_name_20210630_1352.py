# Generated by Django 2.2.16 on 2021-06-30 13:52

from django.db import migrations


def update_cfvs(apps, schema_editor):
    """
    Since we are deprecating the "global_key_name" CustomField and replacing
    its uses with "key_name", move all CustomFieldValues for "global_key_name"
    to instead be equivalent CFVs for "key_name". Make sure to maintain
    any applicable relationships
    """
    CustomField = apps.get_model('infrastructure', 'CustomField')
    CustomFieldValue = apps.get_model('orders', 'CustomFieldValue')

    try:
        old_name_cf = CustomField.objects.get(name="global_key_name")
    except CustomField.DoesNotExist:
        return None

    new_name_cf, __ = CustomField.objects.get_or_create(name="key_name")
    for old_cfv in CustomFieldValue.objects.filter(field=old_name_cf):
        new_cfv, __ = CustomFieldValue.objects.get_or_create(
            field=new_name_cf, str_value=old_cfv.str_value, defaults={"display_seq": old_cfv.display_seq}
        )
        # Go through all relationships and update, inspired by
        # https://stackoverflow.com/questions/2233883/get-all-related-django-model-objects
        links = [f for f in CustomFieldValue._meta.get_fields() if (f.one_to_many or f.one_to_one or f.many_to_many)]
        associated_names = [l.get_accessor_name() for l in links]
        for associated_name in associated_names:
            old_relationship = getattr(old_cfv, associated_name)
            new_relationship = getattr(new_cfv, associated_name)
            # We mostly want to update the relationship from the CFV side, even if that's the reverse,
            # so we don't have to worry about what it's called from the other object (e.g.,
            # custom_field_values vs custom_field_options vs key_reference). However, at time of writing
            # there's a a bug when we try to do that for Servers because the
            # process_dataprotection_plan_change method triggered by the signal only works from the other
            # direction. So in that special case we know how to do it from that side and do so
            for related_object in old_relationship.all():
                if associated_name != "server_set":
                    new_relationship.add(related_object)
                else:
                    related_object.custom_field_values.add(new_cfv)


class Migration(migrations.Migration):

    dependencies = [
        ('infrastructure', '0058_set_global_id_for_preconfigurations'),
        ('orders', '0040_remove_customfieldvalue_tenant'),
    ]

    operations = [
        migrations.RunPython(update_cfvs, migrations.RunPython.noop),
    ]
