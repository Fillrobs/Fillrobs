# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-02-01 19:03
from __future__ import unicode_literals

from django.db import migrations


def copy_resourcetypes(apps, schema_editor):
    """
    Create exact duplicates of all ResourceTypes defined in the tables for the
    services app in the tables for the resources app, including ID
    """
    OldResourceTypeModel = apps.get_model("services", "ResourceType")
    NewResourceTypeModel = apps.get_model("resources", "ResourceType")

    for old_resourcetype in OldResourceTypeModel.objects.all():
        new_resourcetype = NewResourceTypeModel()
        new_resourcetype.id = old_resourcetype.id
        new_resourcetype.name = old_resourcetype.name
        new_resourcetype.label = old_resourcetype.label
        new_resourcetype.plural_label = old_resourcetype.plural_label
        new_resourcetype.lifecycle = old_resourcetype.lifecycle
        new_resourcetype.save()


def copy_resources(apps, schema_editor):
    """
    Create exact duplicates of all Resources defined in the tables for the
    services app in the tables for the resources app, including ID and
    relationships to other objects
    """
    OldResourceModel = apps.get_model("services", "Resource")
    NewResourceModel = apps.get_model("resources", "Resource")

    for old_resource in OldResourceModel.objects.all():
        new_resource = NewResourceModel()
        new_resource.id = old_resource.id
        new_resource.name = old_resource.name
        new_resource.description = old_resource.description
        new_resource.blueprint_id = old_resource.blueprint_id
        new_resource.group_id = old_resource.group_id
        new_resource.owner_id = old_resource.owner_id
        new_resource.lifecycle = old_resource.lifecycle
        new_resource.parent_resource_id = old_resource.parent_resource_id
        new_resource.resource_type_id = old_resource.resource_type_id
        new_resource.save()
        # The initial save sets created to now even if I try to set it before,
        # so let it do that and then update it to the right value
        new_resource.created = old_resource.created
        new_resource.save()
        # M2Ms after have saved object so have instance
        for job in old_resource.jobs.all():
            new_resource.jobs.add(job)
        for param in old_resource.attributes.all():
            new_resource.attributes.add(param)


def copy_softwaredefinednetworks(apps, schema_editor):
    """
    Create exact duplicates of all SoftwareDefinedNetworks defined in the tables for the
    services app in the tables for the resources app, including ID and
    relationships to other objects
    """
    OldSoftwareDefinedNetworkModel = apps.get_model(
        "services", "SoftwareDefinedNetwork")
    NewSoftwareDefinedNetworkModel = apps.get_model(
        "resources", "SoftwareDefinedNetwork")

    for old_sdn in OldSoftwareDefinedNetworkModel.objects.all():
        new_sdn = NewSoftwareDefinedNetworkModel()
        new_sdn.id = old_sdn.id
        new_sdn.name = old_sdn.name
        new_sdn.resource_handler_id = old_sdn.resource_handler_id
        new_sdn.environment_id = old_sdn.environment_id
        new_sdn.resource_id = old_sdn.resource_id
        new_sdn.service_item_id = old_sdn.service_item_id
        new_sdn.network_id = old_sdn.network_id
        new_sdn.identifier = old_sdn.identifier
        new_sdn.appliance_identifier = old_sdn.appliance_identifier
        new_sdn.save()


def copy_softwaredefinednetworkappliances(apps, schema_editor):
    """
    Create exact duplicates of all SoftwareDefinedNetworkAppliances defined in the tables for the
    services app in the tables for the resources app, including ID and
    relationships to other objects
    """
    OldSoftwareDefinedNetworkApplianceModel = apps.get_model(
        "services", "SoftwareDefinedNetworkAppliance")
    NewSoftwareDefinedNetworkApplianceModel = apps.get_model(
        "resources", "SoftwareDefinedNetworkAppliance")

    for old_sdna in OldSoftwareDefinedNetworkApplianceModel.objects.all():
        new_sdna = NewSoftwareDefinedNetworkApplianceModel()
        new_sdna.id = old_sdna.id
        new_sdna.name = old_sdna.name
        new_sdna.resource_handler_id = old_sdna.resource_handler_id
        new_sdna.environment_id = old_sdna.environment_id
        new_sdna.resource_id = old_sdna.resource_id
        new_sdna.identifier = old_sdna.identifier
        new_sdna.save()


def copy_all_services_app_objects_to_resources_app(apps, schema_editor):
    """
    As part of the process to "rename" (or move) the services app to the
    resources app, we need to carefully make exact copies of all the original
    objects (DB table rows) in the new app('s DB table).
    """
    copy_resourcetypes(apps, schema_editor)
    copy_resources(apps, schema_editor)
    copy_softwaredefinednetworks(apps, schema_editor)
    copy_softwaredefinednetworkappliances(apps, schema_editor)


class Migration(migrations.Migration):

    dependencies = [
        ('resources', '0001_initial'),
        ('services', '0017_auto_20180201_1841'),
    ]

    operations = [
        migrations.RunPython(copy_all_services_app_objects_to_resources_app,
                             migrations.RunPython.noop),
    ]
