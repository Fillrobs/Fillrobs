# Generated by Django 2.2.10 on 2020-08-26 17:37

import django.db.models.deletion
from django.db import migrations, models

import driven_apps.common.custom_fields
import driven_apps.common.mixins
import driven_apps.common.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('accounts', '0052_auto_20200526_0144'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('naming', '0044_auto_20200826_1737'),
    ]

    operations = [
        migrations.CreateModel(
            name='DnsPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', driven_apps.common.custom_fields.LowerCaseCharField(help_text='The type of this DNS policy.',
                                                                             max_length=64, validators=[
                        driven_apps.common.validators.RequiredFieldValidator(field_name='type')])),
                ('name', models.CharField(help_text='The user-specified name of this DNS policy.', max_length=255,
                                          validators=[
                                              driven_apps.common.validators.RequiredFieldValidator(field_name='name'),
                                              driven_apps.common.validators.MinLengthValidator(constraint=3,
                                                                                               field_name='name',
                                                                                               required=True),
                                              driven_apps.common.validators.RegexValidator(field_name='name',
                                                                                           message='Must be alphanumeric characters and/or underscores.',
                                                                                           regex='^[0-9A-Za-z_]*$')])),
                ('description',
                 models.TextField(blank=True, help_text='The description text for this DNS policy.', null=True)),
                ('create_a_record', models.BooleanField(default=False, help_text='Create an A Record', validators=[
                    driven_apps.common.validators.BooleanFieldValidator(field_name='createARecord')])),
                ('pre_validate_a_record', models.BooleanField(default=False, help_text='Pre-validate the A Record',
                                                              validators=[
                                                                  driven_apps.common.validators.BooleanFieldValidator(
                                                                      field_name='preValidateARecord')])),
                ('post_validate_a_record', models.BooleanField(default=False, help_text='Post-validate the A Record',
                                                               validators=[
                                                                   driven_apps.common.validators.BooleanFieldValidator(
                                                                       field_name='postValidateARecord')])),
                ('create_ptr_record', models.BooleanField(default=False, help_text='Create an PTR Record', validators=[
                    driven_apps.common.validators.BooleanFieldValidator(field_name='createPTRRecord')])),
                ('pre_validate_ptr_record', models.BooleanField(default=False, help_text='Pre-validate the PTR Record',
                                                                validators=[
                                                                    driven_apps.common.validators.BooleanFieldValidator(
                                                                        field_name='preValidatePTRRecord')])),
                ('post_validate_ptr_record',
                 models.BooleanField(default=False, help_text='Post-validate the PTR Record', validators=[
                     driven_apps.common.validators.BooleanFieldValidator(field_name='postValidatePTRRecord')])),
                ('post_validation_sleep_seconds', models.TextField(default='0',
                                                                   help_text='(Templatable) Seconds to sleep prior to running post-validate record',
                                                                   validators=[
                                                                       driven_apps.common.validators.IntegerRangeValidator(
                                                                           0, 86400,
                                                                           field_name='postValidationSleepSeconds',
                                                                           template=True)])),
                ('validation_timeout_seconds', models.TextField(default='600',
                                                                help_text='(Templatable) Seconds that validation must complete in, else a failure is raised.  Used for DNS caching poisoned cache TTL expiring.',
                                                                validators=[
                                                                    driven_apps.common.validators.IntegerRangeValidator(
                                                                        0, 86400, field_name='validationTimeoutSeconds',
                                                                        template=True)])),
                ('hostname_override', models.TextField(blank=True,
                                                       help_text='(Templatable) Override the hostname with this hostname value.  the property _hostname will be available for use which is the hostname passed into the api call.',
                                                       null=True, validators=[
                        driven_apps.common.validators.StringFieldValidator(blank=True, field_name='hostnameOverride',
                                                                           template=True)])),
                ('endpoint', models.ForeignKey(help_text='DNS provider endpoint for this DNS policy.',
                                               on_delete=django.db.models.deletion.PROTECT, to='naming.Endpoint')),
                ('real_type', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                to='contenttypes.ContentType')),
                ('workspace', models.ForeignKey(help_text='Workspace URL', on_delete=django.db.models.deletion.PROTECT,
                                                to='accounts.Group')),
            ],
            options={
                'verbose_name': 'DNS policy',
                'verbose_name_plural': 'DNS policies',
                'db_table': 'dns_policies',
                'ordering': ['id'],
                'abstract': False,
            },
            bases=(models.Model, driven_apps.common.mixins.RoleBasedHalFilteringPolymorphicMixin),
        ),
        migrations.CreateModel(
            name='InfobloxDnsPolicy',
            fields=[
                ('dnspolicy_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='dns.DnsPolicy')),
                ('create_host_record', models.BooleanField(default=False, help_text='Create an Host Record',
                                                           validators=[
                                                               driven_apps.common.validators.BooleanFieldValidator(
                                                                   field_name='createHostRecord')])),
                ('remove_fixed_address_record', models.BooleanField(default=False,
                                                                    help_text='Remove the fixed address record after creating the dns reservation Record',
                                                                    validators=[
                                                                        driven_apps.common.validators.BooleanFieldValidator(
                                                                            field_name='removeFixedAddressRecord')])),
            ],
            options={
                'db_table': 'dns_policies_infoblox',
                'ordering': ['id'],
                'abstract': False,
            },
            bases=('dns.dnspolicy',),
        ),
        migrations.AddConstraint(
            model_name='dnspolicy',
            constraint=models.UniqueConstraint(fields=('type', 'name'), name='dns_policies_type_name_unique'),
        ),
        migrations.AlterIndexTogether(
            name='dnspolicy',
            index_together={('type', 'name')},
        ),
    ]
