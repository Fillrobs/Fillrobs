# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-21 14:02
from __future__ import unicode_literals

from django.db import migrations
from django.db.utils import OperationalError, ProgrammingError


def apply_existing_verification(apps, schema_editor):
    """
    Enabling/disabling SSL verification is moving from a global setting to
    a property on each RH. The default going forward will be True, but if
    an existing CB has the global setting set to False, those RHs will still
    skip verification until the global setting is changed to True.
    The exception is VMWare, which we want to default
    to False regardless of the global setting, because with stricter verification
    due to upgraded Python and Requests, previously passing certs might start
    to fail. We want to skip verification by default, and give users a chance
    to fix their certs and turn verification on, instead of just starting to fail
    immediately upon upgrading.
    """
    default_verification = True
    GlobalPreferences = apps.get_model('utilities', 'GlobalPreferences')
    VsphereResourceHandler = apps.get_model('vmware', 'VsphereResourceHandler')
    try:
        gp = GlobalPreferences.objects.first()
        if getattr(gp, 'enable_ssl_verification', True) is False:
            default_verification = False
    except (ProgrammingError, OperationalError):
        pass

    if default_verification is True:
        VsphereResourceHandler.objects.update(enable_ssl_verification=False)


class Migration(migrations.Migration):

    dependencies = [
        ('resourcehandlers', '0004_resourcehandler_enable_ssl_verification'),
        ('utilities', '0017_globalpreferences_enable_ssl_verification'),
        ('vmware', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(apply_existing_verification),
    ]
