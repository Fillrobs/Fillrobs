# Generated by Django 3.2.3 on 2021-08-04 19:15
# Edited for a manual data migration
# https://docs.djangoproject.com/en/3.2/topics/migrations/#data-migrations

from django.db import migrations
from utilities.logger import ThreadLogger

logger = ThreadLogger(__name__)


def copy_id_to_gcp_id(apps, schema_editor):
    """
    Copy the project's id to its gcp_id and fill in id with an incrementing int.

    Saving instances with a new id (aka primary key) will create a new instances, so
    this will double the number of GCPProjects in the db - old with null gcp_ids and new
    with existing gcp_ids and numerical ids.
    """
    # We can't import the model directly as they may be a newer version than this
    # migration expects. We use the historical version.
    GCPProject = apps.get_model("gcp", "GCPProject")

    for i, project in enumerate(GCPProject.objects.all()):
        # Only copy the ID over if we need to, so this migration is closer to idempotent and
        # can  be run more than once if needed without winding up with numerical
        # IDs in both fields and losing the string GCP ids
        if project.gcp_id is None:
            project.gcp_id = project.id
            project.id = i + 1  # DB ids have to be > 0, so start from 1
            project.save()


def fix_related_table_references(apps, schema_editor):
    """
    Fix all the tables that reference GCPProject instances by id.

    To make sure we're getting every place that references this key, all places where
    the field was used in the db was found GCPProject._meta.fields_map
    """
    # We can't import the models directly as they may be a newer version than this
    # migration expects. We use the historical version.
    GCPProject = apps.get_model("gcp", "GCPProject")
    GCPServerInfo = apps.get_model("gcp", "GCPServerInfo")
    GCPNetwork = apps.get_model("gcp", "GCPNetwork")
    GCPBillingSummary = apps.get_model("costs", "GCPBillingSummary")

    # Create a lookup object to find the new projects by their gcp_id
    project_map = {project.gcp_id: project.id for project in GCPProject.objects.filter(gcp_id__isnull=False)}

    # Define all the models to fix and their attributes that point to the GCPProject id
    foreign_key_models_and_attributes = (
        (GCPServerInfo, "gcp_project_id"),
        (GCPNetwork, "project_id"),
        (GCPBillingSummary, "project_id"),
    )

    fix_foreign_keys(foreign_key_models_and_attributes, project_map)
    fix_many_to_many_keys(GCPProject)


def fix_foreign_keys(models_and_attributes: tuple, project_map: dict):
    """
    Every foreign key that is for GCPProject contains its old id, which is now the
    GCPProject.gcp_id. We want it to contain the GCPProject's new id instead.
    """
    # Loop through the models to fix
    for Model, attr_name in models_and_attributes:
        # Loop through every instance of that model
        for instance in Model.objects.all():
            gcp_id = getattr(instance, attr_name)
            if gcp_id == "":
                # It has happened where some projects had empty strings as the ID, but
                # they're not functional projects do we don't want anything pointing to them
                setattr(instance, attr_name, None)
                instance.save()
            elif gcp_id is not None and not isinstance(gcp_id, int):
                # Find the new id by looking it up using the model's current attribute, assuming
                # it isn't already using a numeric ID
                new_numeric_id = project_map[gcp_id]
                # Set the model's attribute to the new id
                setattr(instance, attr_name, new_numeric_id)
                instance.save()


def fix_many_to_many_keys(GCPProject):
    """
    Change all many-to-many relationships for the old project instances (with gcp_id as
    their id) to the new project instances (with incrementing numerical ids).
    """
    # All the old projects have null gcp_id
    old_projects = GCPProject.objects.filter(gcp_id__isnull=True)

    for old_project in old_projects:
        # Find the new project
        new_project = GCPProject.objects.get(gcp_id=old_project.id)

        # Fix the subnet m2m relationship
        for subnet in old_project.usable_subnets.all():
            subnet.service_projects.add(new_project)
            subnet.service_projects.remove(old_project)

        # Fix the group m2m relationship
        for group in old_project.groups.all():
            group.gcp_projects.add(new_project)
            group.gcp_projects.remove(old_project)


def fix_environment_gcp_project_cfv(apps, schema_editor):
    """
    Environments for gcp have an env.gcp_project custom field containing the old
    GCPProject.id (now GCPProjectgcp_id). This should contain the new GCPProject.id.
    """
    # We can't import the models directly as they may be a newer version than this
    # migration expects. We use the historical version.
    GCPProject = apps.get_model("gcp", "GCPProject")
    Environment = apps.get_model("infrastructure", "Environment")
    CustomField = apps.get_model("infrastructure", "CustomField")
    CustomFieldValue = apps.get_model("orders", "CustomFieldValue")

    # Get the field we're operating on
    try:
        field = CustomField.objects.get(name="gcp_project")
    except CustomField.DoesNotExist:
        # Field isn't in use anywhere, so nothing to migrate.
        return

    for environment in Environment.objects.all():
        # Get info
        try:
            # You have to go for the custom field value manually with historical models
            cfv = environment.custom_field_options.get(field=field)
        except CustomFieldValue.DoesNotExist:
            # Not an environment of a gcp project
            continue

        gcp_id = cfv.str_value
        if not gcp_id:
            # No data to update
            continue

        # Remove the old data
        environment.custom_field_options.remove(cfv)

        try:
            project = GCPProject.objects.get(gcp_id=gcp_id)
        except GCPProject.DoesNotExist:
            # The project must have been deleted in cloudbolt
            logger.warning(
                f"Environment {environment} can't update its location because the "
                f"GCPProject with gcp_id '{gcp_id}' is missing."
            )
            environment.gcp_project = None
            continue

        # Create a new cfv with the project's id
        new_cfv, created = CustomFieldValue.objects.get_or_create(
            field=field, int_value=project.id
        )

        # Add it to the environment
        environment.custom_field_options.add(new_cfv)

    # Finally change the custom field type to 'int'
    field.type = "INT"
    field.save()


def delete_old_gcpprojects(apps, schema_editor):
    """
    Delete all the old GCPProject instances, which should all have null gcp_ids.
    """
    # We can't import the models directly as they may be a newer version than this
    # migration expects. We use the historical version.
    GCPProject = apps.get_model("gcp", "GCPProject")
    GCPProject.objects.filter(gcp_id__isnull=True).delete()


def noop_warning(*args, **kwargs):
    """
    Do nothing function so that this migration can be reversed if necessary.
    Database records are not returned to their original state, so log a warning.
    """
    logger.warning("Reversing the migration without fixing the GCP Project data.")


class Migration(migrations.Migration):

    dependencies = [
        ("gcp", "0016_gcpproject_gcp_id"),
        ("accounts", "0061_userprofile_legal_notice_seen"),
        ("costs", "0013_set_rates_global_ids"),
        ("infrastructure", "0059_replace_global_key_name_with_key_name_20210630_1352"),
        ("orders", "0041_alter_customfieldvalue_url_value"),
    ]

    operations = [
        # A true reverse migration of this is complex and would be a
        # super-limited use case, so we'll just log a warning and then do noops
        migrations.RunPython(copy_id_to_gcp_id, noop_warning),
        migrations.RunPython(fix_related_table_references, migrations.RunPython.noop),
        migrations.RunPython(fix_environment_gcp_project_cfv, migrations.RunPython.noop),
        migrations.RunPython(delete_old_gcpprojects, migrations.RunPython.noop),
    ]
