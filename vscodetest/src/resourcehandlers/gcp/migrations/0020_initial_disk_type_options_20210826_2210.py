# Generated by Django 3.2.3 on 2021-08-26 22:10

from django.db import migrations


class Migration(migrations.Migration):
    def set_initial_gcp_disk_type_options(apps, schema_editor):
        """
        In order to smooth the transition of adding the new (required) GCP Disk Type
        Tech-Specific Parameter, we want to add the current options to any existing
        GCP Environment. Otherwise, things would behave poorly until users went to
        each of those Environments and re-imported all their Tech-specific Parameters.
        This allows everything to function immediately, and they can still import
        the Parameter's options at any time in the future to make sure they're current
        """
        GCPHandler = apps.get_model("gcp", "GCPHandler")
        CustomField = apps.get_model("infrastructure", "CustomField")
        CustomFieldValue = apps.get_model("orders", "CustomFieldValue")
        # Copied from gcp_minimal since this will run first
        cf_name = "gcp_disk_type"
        cf_dict = {
            "label": "GCP Disk Type",
            "type": "STR",
            "required": True,
            "description": (
                "Type of disk to create in GCP. During provisioning, applies to both the "
                "boot disk and any additional disks requested."
            ),
        }
        options = ["pd-standard", "pd-balanced", "pd-extreme", "pd-ssd"]

        envs = []
        for handler in GCPHandler.objects.all():
            envs.extend(handler.environment_set.all())

        if envs:
            cf, __ = CustomField.objects.get_or_create(name=cf_name, defaults=cf_dict)
            cfvs = []
            for opt in options:
                cfv, __ = CustomFieldValue.objects.get_or_create(field=cf, str_value=opt)
                # Make the standard one 1st like we do when importing
                if opt == "pd-standard":
                    cfv.display_seq = 1
                    cfv.save()
                cfvs.append(cfv)

            for env in envs:
                # Only do it if it doesn't currently have any options
                if not env.custom_field_options.filter(field=cf).exists():
                    env.custom_fields.add(cf)
                    env.custom_field_options.add(*cfvs)

    dependencies = [
        ('gcp', '0019_merge_20210818_2220'),
    ]

    operations = [
        migrations.RunPython(set_initial_gcp_disk_type_options, migrations.RunPython.noop),
    ]
