<div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Copyright (c) Richard Wall</span>
<span class="cm"> * See LICENSE for details.</span>
<span class="cm"> *</span>
<span class="cm"> * Wrappers and convenience fuctions for working with the javascriptRRD, jQuery,</span>
<span class="cm"> * and Flot charting packages.</span>
<span class="cm"> *</span>
<span class="cm"> * Designed to work well with the RRD files generated by Collectd:</span>
<span class="cm"> * - http://collectd.org/</span>
<span class="cm"> *</span>
<span class="cm"> * Requirements:</span>
<span class="cm"> * - JavascriptRRD: http://javascriptrrd.sourceforge.net/</span>
<span class="cm"> * - jQuery: http://jquery.com/</span>
<span class="cm"> * - Flot: http://code.google.com/p/flot/</span>
<span class="cm"> *</span>
<span class="cm"> * @module jarmon</span>
<span class="cm"> */</span>

<span class="cm">/**</span>
<span class="cm"> * A namespace for Jarmon</span>
<span class="cm"> *</span>
<span class="cm"> * @class jarmon</span>
<span class="cm"> * @static</span>
<span class="cm"> */</span>
<span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">jarmon</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">jarmon</span> <span class="o">=</span> <span class="p">{};</span>
<span class="p">}</span>

<span class="c1">// A VBScript and Javascript helper function to convert IE responseBody to a</span>
<span class="c1">// byte string.</span>
<span class="c1">// http://miskun.com/javascript/internet-explorer-and-binary-files-data-access/</span>
<span class="kd">var</span> <span class="nx">IEBinaryToArray_ByteStr_Script</span> <span class="o">=</span>
    <span class="s2">&quot;&lt;!-- IEBinaryToArray_ByteStr --&gt;\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;&lt;script type=&#39;text/vbscript&#39;&gt;\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;Function IEBinaryToArray_ByteStr(Binary)\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;	IEBinaryToArray_ByteStr = CStr(Binary)\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;End Function\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;Function IEBinaryToArray_ByteStr_Last(Binary)\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;	Dim lastIndex\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;	lastIndex = LenB(Binary)\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;	if lastIndex mod 2 Then\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;		IEBinaryToArray_ByteStr_Last = Chr( AscB( MidB( Binary, lastIndex, 1 ) ) )\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;	Else\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;		IEBinaryToArray_ByteStr_Last = &quot;</span><span class="o">+</span><span class="s1">&#39;&quot;&quot;&#39;</span><span class="o">+</span><span class="s2">&quot;\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;	End If\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;End Function\r\n&quot;</span><span class="o">+</span>
    <span class="s2">&quot;&lt;/script&gt;\r\n&quot;</span><span class="p">;</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">IEBinaryToArray_ByteStr_Script</span><span class="p">);</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">GetIEByteArray_ByteStr</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">IEByteArray</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">jarmon</span><span class="p">.</span><span class="nx">ByteMapping</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">jarmon</span><span class="p">.</span><span class="nx">ByteMapping</span> <span class="o">=</span> <span class="p">{};</span>
        <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">256</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="mi">256</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
                <span class="nx">jarmon</span><span class="p">.</span><span class="nx">ByteMapping</span><span class="p">[</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">j</span> <span class="o">*</span> <span class="mi">256</span> <span class="p">)</span> <span class="p">]</span> <span class="o">=</span>
                    <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span>
                <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">rawBytes</span> <span class="o">=</span> <span class="nx">IEBinaryToArray_ByteStr</span><span class="p">(</span><span class="nx">IEByteArray</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">lastChr</span> <span class="o">=</span> <span class="nx">IEBinaryToArray_ByteStr_Last</span><span class="p">(</span><span class="nx">IEByteArray</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">rawBytes</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\s\S]/g</span><span class="p">,</span>
        <span class="kd">function</span><span class="p">(</span> <span class="nx">match</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">ByteMapping</span><span class="p">[</span><span class="nx">match</span><span class="p">];</span> <span class="p">})</span> <span class="o">+</span> <span class="nx">lastChr</span><span class="p">;</span>
<span class="p">};</span>

<span class="cm">/*</span>
<span class="cm"> * BinaryFile over XMLHttpRequest</span>
<span class="cm"> * Part of the javascriptRRD package</span>
<span class="cm"> * Copyright (c) 2009 Frank Wuerthwein, fkw@ucsd.edu</span>
<span class="cm"> * MIT License [http://www.opensource.org/licenses/mit-license.php]</span>
<span class="cm"> *</span>
<span class="cm"> * Original repository: http://javascriptrrd.sourceforge.net/</span>
<span class="cm"> *</span>
<span class="cm"> * Based on:</span>
<span class="cm"> *   Binary Ajax 0.1.5</span>
<span class="cm"> * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com,</span>
<span class="cm"> *    http://blog.nihilogic.dk/</span>
<span class="cm"> *   MIT License [http://www.opensource.org/licenses/mit-license.php]</span>
<span class="cm"> */</span>

<span class="c1">// ============================================================</span>
<span class="c1">// Exception class</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">InvalidBinaryFile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">message</span><span class="o">=</span><span class="nx">msg</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;Invalid BinaryFile&quot;</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// pretty print</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">InvalidBinaryFile</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;: &quot;&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// =====================================================================</span>
<span class="c1">// BinaryFile class</span>
<span class="c1">//   Allows access to element inside a binary stream</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">BinaryFile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">strData</span><span class="p">,</span> <span class="nx">iDataOffset</span><span class="p">,</span> <span class="nx">iDataLength</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">strData</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">dataOffset</span> <span class="o">=</span> <span class="nx">iDataOffset</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">dataLength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// added</span>
    <span class="kd">var</span> <span class="nx">doubleMantExpHi</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">28</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">doubleMantExpLo</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">52</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">doubleMantExpFast</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">20</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">strData</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">dataLength</span> <span class="o">=</span> <span class="nx">iDataLength</span> <span class="o">||</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">InvalidBinaryFile</span><span class="p">(</span>
          <span class="s2">&quot;Unsupported type &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">strData</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">getRawData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="nx">dataOffset</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">dataLength</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">getSByteAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">iByte</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">iByte</span> <span class="o">&gt;</span> <span class="mi">127</span><span class="p">)</span>
            <span class="k">return</span> <span class="nx">iByte</span> <span class="o">-</span> <span class="mi">256</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="nx">iByte</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">getShortAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">iShort</span> <span class="o">=</span> <span class="p">(</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">iShort</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">iShort</span> <span class="o">+=</span> <span class="mi">65536</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">iShort</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getSShortAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">iUShort</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getShortAt</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">iUShort</span> <span class="o">&gt;</span> <span class="mi">32767</span><span class="p">)</span>
            <span class="k">return</span> <span class="nx">iUShort</span> <span class="o">-</span> <span class="mi">65536</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="nx">iUShort</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getLongAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">iByte1</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">),</span>
            <span class="nx">iByte2</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
            <span class="nx">iByte3</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">2</span><span class="p">),</span>
            <span class="nx">iByte4</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">iLong</span> <span class="o">=</span> <span class="p">(((((</span><span class="nx">iByte4</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">iLong</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">iLong</span> <span class="o">+=</span> <span class="mi">4294967296</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">iLong</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getSLongAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">iULong</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getLongAt</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">iULong</span> <span class="o">&gt;</span> <span class="mi">2147483647</span><span class="p">)</span>
            <span class="k">return</span> <span class="nx">iULong</span> <span class="o">-</span> <span class="mi">4294967296</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="nx">iULong</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getStringAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">,</span> <span class="nx">iLength</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">aStr</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">iOffset</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">iOffset</span><span class="o">+</span><span class="nx">iLength</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">,</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">aStr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">i</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">aStr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="c1">// Added</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getCStringAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">,</span> <span class="nx">iMaxLength</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">aStr</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">iOffset</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;(</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">iOffset</span><span class="o">+</span><span class="nx">iMaxLength</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
             <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="o">++</span><span class="p">,</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">aStr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">i</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">aStr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="c1">// Added</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getDoubleAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">iByte1</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">),</span>
            <span class="nx">iByte2</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
            <span class="nx">iByte3</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">2</span><span class="p">),</span>
                <span class="nx">iByte4</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">3</span><span class="p">),</span>
                <span class="nx">iByte5</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">4</span><span class="p">),</span>
            <span class="nx">iByte6</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">5</span><span class="p">),</span>
            <span class="nx">iByte7</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">6</span><span class="p">),</span>
            <span class="nx">iByte8</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">7</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">iSign</span><span class="o">=</span><span class="nx">iByte8</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">iExpRaw</span><span class="o">=</span><span class="p">((</span><span class="nx">iByte8</span> <span class="o">&amp;</span> <span class="mh">0x7F</span><span class="p">)</span><span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">iByte7</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">iMantHi</span><span class="o">=</span><span class="p">((((((</span><span class="nx">iByte7</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte6</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte5</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte4</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">iMantLo</span><span class="o">=</span><span class="p">((((</span><span class="nx">iByte3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte1</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">iExpRaw</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mf">0.0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">iExpRaw</span><span class="o">===</span><span class="mh">0x7ff</span><span class="p">)</span> <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">iExp</span><span class="o">=</span><span class="p">(</span><span class="nx">iExpRaw</span> <span class="o">&amp;</span> <span class="mh">0x7FF</span><span class="p">)</span><span class="o">-</span><span class="mi">1023</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">dDouble</span> <span class="o">=</span> <span class="p">((</span><span class="nx">iSign</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">iExp</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="nx">iMantLo</span><span class="o">*</span><span class="nx">doubleMantExpLo</span> <span class="o">+</span> <span class="nx">iMantHi</span><span class="o">*</span><span class="nx">doubleMantExpHi</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">dDouble</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="c1">// added</span>
    <span class="c1">// Extracts only 4 bytes out of 8, loosing in precision (20 bit mantissa)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getFastDoubleAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">iByte5</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">4</span><span class="p">),</span>
            <span class="nx">iByte6</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">5</span><span class="p">),</span>
            <span class="nx">iByte7</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">6</span><span class="p">),</span>
            <span class="nx">iByte8</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span> <span class="o">+</span> <span class="mi">7</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">iSign</span><span class="o">=</span><span class="nx">iByte8</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">iExpRaw</span><span class="o">=</span><span class="p">((</span><span class="nx">iByte8</span> <span class="o">&amp;</span> <span class="mh">0x7F</span><span class="p">)</span><span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">iByte7</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">iMant</span><span class="o">=</span><span class="p">((((</span><span class="nx">iByte7</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte6</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">iByte5</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">iExpRaw</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mf">0.0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">iExpRaw</span><span class="o">===</span><span class="mh">0x7ff</span><span class="p">)</span> <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">iExp</span><span class="o">=</span><span class="p">(</span><span class="nx">iExpRaw</span> <span class="o">&amp;</span> <span class="mh">0x7FF</span><span class="p">)</span><span class="o">-</span><span class="mi">1023</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">dDouble</span> <span class="o">=</span> <span class="p">((</span><span class="nx">iSign</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">iExp</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="nx">iMant</span><span class="o">*</span><span class="nx">doubleMantExpFast</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">dDouble</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">getCharAt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getByteAt</span><span class="p">(</span><span class="nx">iOffset</span><span class="p">));</span>
    <span class="p">};</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">downloadBinary</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Download a binary file asynchronously using the jQuery.ajax function</span>
<span class="cm">     *</span>
<span class="cm">     * @method downloadBinary</span>
<span class="cm">     * @param url {String} The url of the object to be downloaded</span>
<span class="cm">     * @return {Object} A deferred which will callback with an instance of</span>
<span class="cm">     * javascriptrrd.BinaryFile</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
        <span class="nx">url</span><span class="o">:</span> <span class="nx">url</span><span class="p">,</span>
        <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span>
        <span class="nx">cache</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">mimeType</span><span class="o">:</span> <span class="s1">&#39;text/plain; charset=x-user-defined&#39;</span><span class="p">,</span>
        <span class="nx">xhr</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="c1">// Save a reference to the native xhr object - we need it later</span>
            <span class="c1">// in IE to access the binary data from responseBody</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_nativeXhr</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">ajaxSettings</span><span class="p">.</span><span class="nx">xhr</span><span class="p">();</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_nativeXhr</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">jqXHR</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_nativeXhr</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_nativeXhr</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">,</span> <span class="nx">jqXHR</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// In IE we return the responseBody</span>
            <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_nativeXhr</span><span class="p">.</span><span class="nx">responseBody</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span>
                    <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">BinaryFile</span><span class="p">(</span>
                        <span class="nx">jarmon</span><span class="p">.</span><span class="nx">GetIEByteArray_ByteStr</span><span class="p">(</span>
                            <span class="k">this</span><span class="p">.</span><span class="nx">_nativeXhr</span><span class="p">.</span><span class="nx">responseBody</span><span class="p">)));</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">BinaryFile</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">,</span> <span class="nx">errorThrown</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">textStatus</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">d</span><span class="p">;</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">localTimeFormatter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">axis</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Copied from jquery.flot.js and modified to allow timezone</span>
<span class="cm">     * adjustment.</span>
<span class="cm">     *</span>
<span class="cm">     * @method localTimeFormatter</span>
<span class="cm">     * @param v {Number} The timestamp to be formatted</span>
<span class="cm">     * @param axis {Object} A hash containing information about the time axis</span>
<span class="cm">     * @return {String} The formatted datetime string</span>
<span class="cm">     **/</span>
    <span class="c1">// map of app. size of time units in milliseconds</span>
    <span class="kd">var</span> <span class="nx">timeUnitSize</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s2">&quot;second&quot;</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="s2">&quot;minute&quot;</span><span class="o">:</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="s2">&quot;hour&quot;</span><span class="o">:</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="s2">&quot;day&quot;</span><span class="o">:</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="s2">&quot;month&quot;</span><span class="o">:</span> <span class="mi">30</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="s2">&quot;year&quot;</span><span class="o">:</span> <span class="mf">365.2425</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span>
    <span class="p">};</span>

    <span class="c1">// Offset the input timestamp by the user defined amount</span>
    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">v</span> <span class="o">+</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">tzoffset</span><span class="p">);</span>

    <span class="c1">// first check global format</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">axis</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">timeformat</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">plot</span><span class="p">.</span><span class="nx">formatDate</span><span class="p">(</span>
            <span class="nx">d</span><span class="p">,</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">timeformat</span><span class="p">,</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">monthNames</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">tickSize</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nx">timeUnitSize</span><span class="p">[</span><span class="nx">axis</span><span class="p">.</span><span class="nx">tickSize</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
    <span class="kd">var</span> <span class="nx">span</span> <span class="o">=</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">min</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">suffix</span> <span class="o">=</span> <span class="p">(</span><span class="nx">axis</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">twelveHourClock</span><span class="p">)</span> <span class="o">?</span> <span class="s2">&quot; %p&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">fmt</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&lt;</span> <span class="nx">timeUnitSize</span><span class="p">.</span><span class="nx">minute</span><span class="p">)</span>
        <span class="nx">fmt</span> <span class="o">=</span> <span class="s2">&quot;%h:%M:%S&quot;</span> <span class="o">+</span> <span class="nx">suffix</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&lt;</span> <span class="nx">timeUnitSize</span><span class="p">.</span><span class="nx">day</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">span</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">timeUnitSize</span><span class="p">.</span><span class="nx">day</span><span class="p">)</span>
            <span class="nx">fmt</span> <span class="o">=</span> <span class="s2">&quot;%h:%M&quot;</span> <span class="o">+</span> <span class="nx">suffix</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="nx">fmt</span> <span class="o">=</span> <span class="s2">&quot;%b %d %h:%M&quot;</span> <span class="o">+</span> <span class="nx">suffix</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&lt;</span> <span class="nx">timeUnitSize</span><span class="p">.</span><span class="nx">month</span><span class="p">)</span>
        <span class="nx">fmt</span> <span class="o">=</span> <span class="s2">&quot;%b %d&quot;</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&lt;</span> <span class="nx">timeUnitSize</span><span class="p">.</span><span class="nx">year</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">span</span> <span class="o">&lt;</span> <span class="nx">timeUnitSize</span><span class="p">.</span><span class="nx">year</span><span class="p">)</span>
            <span class="nx">fmt</span> <span class="o">=</span> <span class="s2">&quot;%b&quot;</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="nx">fmt</span> <span class="o">=</span> <span class="s2">&quot;%b %y&quot;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
        <span class="nx">fmt</span> <span class="o">=</span> <span class="s2">&quot;%y&quot;</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">plot</span><span class="p">.</span><span class="nx">formatDate</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">,</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">monthNames</span><span class="p">);</span>
<span class="p">};</span>


<span class="cm">/**</span>
<span class="cm"> * A wrapper around an instance of javascriptrrd.RRDFile which provides a</span>
<span class="cm"> * convenient way to query the RRDFile based on time range, RRD data source (DS)</span>
<span class="cm"> * and RRD consolidation function (CF).</span>
<span class="cm"> *</span>
<span class="cm"> * @class jarmon.RrdQuery</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param rrd {Object} A javascriptrrd.RRDFile</span>
<span class="cm"> * @param unit {String} The unit symbol for this data series</span>
<span class="cm"> * @param transformer {Function} A callable which performs a</span>
<span class="cm"> *      tranfsformation of the values returned from the RRD file.</span>
<span class="cm"> **/</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">rrd</span><span class="p">,</span> <span class="nx">unit</span><span class="p">,</span> <span class="nx">transformer</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">rrd</span> <span class="o">=</span> <span class="nx">rrd</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">unit</span> <span class="o">=</span> <span class="nx">unit</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">transformer</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
 	    <span class="k">this</span><span class="p">.</span><span class="nx">transformer</span> <span class="o">=</span> <span class="nx">transformer</span><span class="p">;</span>
 	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
 	    <span class="k">this</span><span class="p">.</span><span class="nx">transformer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">v</span><span class="p">;};</span>
 	<span class="p">}</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">startTimeJs</span><span class="p">,</span> <span class="nx">endTimeJs</span><span class="p">,</span>
                                             <span class="nx">dsId</span><span class="p">,</span> <span class="nx">cfName</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Generate a Flot compatible data object containing rows between start and</span>
<span class="cm">     * end time. The rows are taken from the first RRA whose data spans the</span>
<span class="cm">     * requested time range.</span>
<span class="cm">     *</span>
<span class="cm">     * @method getData</span>
<span class="cm">     * @param startTimeJs {Number} start timestamp in microseconds</span>
<span class="cm">     * @param endTimeJs {Number} end timestamp in microseconds</span>
<span class="cm">     * @param dsId {Variant} identifier of the RRD datasource (string or number)</span>
<span class="cm">     * @param cfName {String} The name of an RRD consolidation function (CF)</span>
<span class="cm">     *      eg AVERAGE, MIN, MAX</span>
<span class="cm">     * @return {Object} A Flot compatible data series</span>
<span class="cm">     *      eg label: &#39;&#39;, data: [], unit: &#39;&#39;</span>
<span class="cm">     **/</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">startTimeJs</span> <span class="o">&gt;=</span> <span class="nx">endTimeJs</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">RangeError</span><span class="p">(</span>
            <span class="p">[</span><span class="s1">&#39;starttime must be less than endtime.&#39;</span><span class="p">,</span>
             <span class="s1">&#39;starttime:&#39;</span><span class="p">,</span> <span class="nx">startTimeJs</span><span class="p">,</span>
             <span class="s1">&#39;endtime:&#39;</span><span class="p">,</span> <span class="nx">endTimeJs</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nx">startTimeJs</span><span class="o">/</span><span class="mi">1000</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">lastUpdated</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">getLastUpdate</span><span class="p">();</span>

    <span class="c1">// default endTime to the last updated time (quantized to rrd step boundry)</span>
    <span class="kd">var</span> <span class="nx">endTime</span> <span class="o">=</span> <span class="nx">lastUpdated</span> <span class="o">-</span> <span class="nx">lastUpdated</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">getMinStep</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">endTimeJs</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">endTime</span> <span class="o">=</span> <span class="nx">endTimeJs</span><span class="o">/</span><span class="mi">1000</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">dsId</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">dsId</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">dsId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">getDS</span><span class="p">(</span><span class="nx">dsId</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">cfName</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">cfName</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">cfName</span> <span class="o">=</span> <span class="s1">&#39;AVERAGE&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">rra</span><span class="p">,</span> <span class="nx">step</span><span class="p">,</span> <span class="nx">rraRowCount</span><span class="p">,</span> <span class="nx">lastRowTime</span><span class="p">,</span> <span class="nx">firstRowTime</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">getNrRRAs</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Look through all RRAs looking for the most suitable</span>
        <span class="c1">// data resolution.</span>
        <span class="nx">rra</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">getRRA</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

        <span class="c1">// If this rra doesn&#39;t use the requested CF then move on to the next.</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">rra</span><span class="p">.</span><span class="nx">getCFName</span><span class="p">()</span> <span class="o">!==</span> <span class="nx">cfName</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nx">step</span> <span class="o">=</span> <span class="nx">rra</span><span class="p">.</span><span class="nx">getStep</span><span class="p">();</span>
        <span class="nx">rraRowCount</span> <span class="o">=</span> <span class="nx">rra</span><span class="p">.</span><span class="nx">getNrRows</span><span class="p">();</span>
        <span class="nx">lastRowTime</span> <span class="o">=</span> <span class="nx">lastUpdated</span><span class="o">-</span><span class="nx">lastUpdated</span><span class="o">%</span><span class="nx">step</span><span class="p">;</span>
        <span class="nx">firstRowTime</span> <span class="o">=</span> <span class="nx">lastRowTime</span> <span class="o">-</span> <span class="nx">rraRowCount</span> <span class="o">*</span> <span class="nx">step</span><span class="p">;</span>

        <span class="c1">// We assume that the RRAs are listed in ascending order of time range,</span>
        <span class="c1">// therefore the first RRA which contains the range minimum should give</span>
        <span class="c1">// the highest resolution data for this range.</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">firstRowTime</span> <span class="o">&lt;=</span> <span class="nx">startTime</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// If we got to the end of the loop without ever defining step, it means</span>
    <span class="c1">// that the CF check never succeded.</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s1">&#39;Unrecognised consolidation function: &#39;</span> <span class="o">+</span> <span class="nx">cfName</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">flotData</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">var</span> <span class="nx">dsIndex</span> <span class="o">=</span> <span class="nx">ds</span><span class="p">.</span><span class="nx">getIdx</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">startRowTime</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">firstRowTime</span><span class="p">,</span> <span class="nx">startTime</span> <span class="o">-</span> <span class="nx">startTime</span><span class="o">%</span><span class="nx">step</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">endRowTime</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">lastRowTime</span><span class="p">,</span> <span class="nx">endTime</span> <span class="o">-</span> <span class="nx">endTime</span><span class="o">%</span><span class="nx">step</span><span class="p">);</span>
    <span class="c1">// If RRD exists, but hasn&#39;t been updated then the start time might end up</span>
    <span class="c1">// being higher than the end time (which is capped at the last row time of</span>
    <span class="c1">// the chosen RRA, so cap startTime at endTime...if you see what I mean)</span>
    <span class="nx">startRowTime</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">startRowTime</span><span class="p">,</span> <span class="nx">endRowTime</span><span class="p">);</span>

    <span class="cm">/*</span>
<span class="cm">    console.log(&#39;FRT: &#39;, new Date(firstRowTime*1000));</span>
<span class="cm">    console.log(&#39;LRT: &#39;, new Date(lastRowTime*1000));</span>
<span class="cm">    console.log(&#39;SRT: &#39;, new Date(startRowTime*1000));</span>
<span class="cm">    console.log(&#39;ERT: &#39;, new Date(endRowTime*1000));</span>
<span class="cm">    console.log(&#39;DIFF: &#39;, (lastRowTime - startRowTime) / step);</span>
<span class="cm">    console.log(&#39;ROWS: &#39;, rraRowCount);</span>
<span class="cm">    */</span>

    <span class="kd">var</span> <span class="nx">startRowIndex</span> <span class="o">=</span> <span class="nx">rraRowCount</span> <span class="o">-</span> <span class="p">(</span><span class="nx">lastRowTime</span> <span class="o">-</span> <span class="nx">startRowTime</span><span class="p">)</span>  <span class="o">/</span> <span class="nx">step</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">endRowIndex</span> <span class="o">=</span> <span class="nx">rraRowCount</span> <span class="o">-</span> <span class="p">(</span><span class="nx">lastRowTime</span> <span class="o">-</span> <span class="nx">endRowTime</span><span class="p">)</span>  <span class="o">/</span> <span class="nx">step</span><span class="p">;</span>

    <span class="c1">//console.log(&#39;SRI: &#39;, startRowIndex);</span>
    <span class="c1">//console.log(&#39;ERI: &#39;, endRowIndex);</span>

    <span class="kd">var</span> <span class="nx">val</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">timestamp</span> <span class="o">=</span> <span class="nx">startRowTime</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">startRowIndex</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">endRowIndex</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">val</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">transformer</span><span class="p">(</span><span class="nx">rra</span><span class="p">.</span><span class="nx">getEl</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">dsIndex</span><span class="p">));</span>
        <span class="nx">flotData</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">timestamp</span><span class="o">*</span><span class="mf">1000.0</span><span class="p">,</span> <span class="nx">val</span><span class="p">]);</span>
        <span class="nx">timestamp</span> <span class="o">+=</span> <span class="nx">step</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Now get the date of the earliest record in entire rrd file, ie that of</span>
    <span class="c1">// the last (longest range) rra.</span>
    <span class="nx">rra</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">getRRA</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">getNrRRAs</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">firstUpdated</span> <span class="o">=</span> <span class="nx">lastUpdated</span> <span class="o">-</span> <span class="p">(</span><span class="nx">rra</span><span class="p">.</span><span class="nx">getNrRows</span><span class="p">()</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">rra</span><span class="p">.</span><span class="nx">getStep</span><span class="p">();</span>

    <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;label&#39;</span><span class="o">:</span> <span class="nx">ds</span><span class="p">.</span><span class="nx">getName</span><span class="p">(),</span> <span class="s1">&#39;data&#39;</span><span class="o">:</span> <span class="nx">flotData</span><span class="p">,</span> <span class="s1">&#39;unit&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">unit</span><span class="p">,</span>
            <span class="s1">&#39;firstUpdated&#39;</span><span class="o">:</span> <span class="nx">firstUpdated</span><span class="o">*</span><span class="mf">1000.0</span><span class="p">,</span>
            <span class="s1">&#39;lastUpdated&#39;</span><span class="o">:</span> <span class="nx">lastUpdated</span><span class="o">*</span><span class="mf">1000.0</span><span class="p">};</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getDSNames</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Return a list of RRD Data Source names</span>
<span class="cm">     *</span>
<span class="cm">     * @method getDSNames</span>
<span class="cm">     * @return {Array} An array of DS names.</span>
<span class="cm">     **/</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">getDSNames</span><span class="p">();</span>
<span class="p">};</span>


<span class="cm">/**</span>
<span class="cm"> * A wrapper around RrdQuery which provides asynchronous access to the data in a</span>
<span class="cm"> * remote RRD file.</span>
<span class="cm"> *</span>
<span class="cm"> * @class jarmon.RrdQueryRemote</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param url {String} The url of a remote RRD file</span>
<span class="cm"> * @param unit {String} The unit suffix of this data eg &#39;bit/sec&#39;</span>
<span class="cm"> * @param downloader {Function} A callable which returns a Deferred and calls</span>
<span class="cm"> *      back with a javascriptrrd.BinaryFile when it has downloaded.</span>
<span class="cm"> * @param transformer {Function} A callable which performs a</span>
<span class="cm"> *      tranfsformation of the values returned from the RRD file.</span>
<span class="cm"> **/</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryRemote</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">unit</span><span class="p">,</span> <span class="nx">downloader</span><span class="p">,</span> <span class="nx">transformer</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">unit</span> <span class="o">=</span> <span class="nx">unit</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">downloader</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">downloader</span> <span class="o">=</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">downloadBinary</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">downloader</span> <span class="o">=</span> <span class="nx">downloader</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">transformer</span> <span class="o">=</span> <span class="nx">transformer</span><span class="p">;</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">lastUpdate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_download</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryRemote</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_callRemote</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">methodName</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Download the rrd if there has never been a download and don&#39;t start</span>
    <span class="c1">// another download if one is already in progress.</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_download</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_download</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">downloader</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Set up a deferred which will call getData on the local RrdQuery object</span>
    <span class="c1">// returning a flot compatible data object to the caller.</span>
    <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>

    <span class="c1">// Add a pair of callbacks to the current download which will callback the</span>
    <span class="c1">// result which we setup above.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_download</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">res</span> <span class="k">instanceof</span> <span class="nb">Error</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">ret</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// Upon successful download convert the resulting binary</span>
                <span class="c1">// into an RRD file</span>
                <span class="kd">var</span> <span class="nx">rrd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RRDFile</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">lastUpdate</span> <span class="o">=</span> <span class="nx">rrd</span><span class="p">.</span><span class="nx">getLastUpdate</span><span class="p">();</span>

                <span class="kd">var</span> <span class="nx">rq</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQuery</span><span class="p">(</span><span class="nx">rrd</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">unit</span><span class="p">);</span>
                <span class="k">try</span> <span class="p">{</span>
                    <span class="nx">ret</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">rq</span><span class="p">[</span><span class="nx">methodName</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">rq</span><span class="p">,</span> <span class="nx">args</span><span class="p">));</span>
                <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">ret</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
        <span class="p">});</span>

    <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryRemote</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">endTime</span><span class="p">,</span>
                                                   <span class="nx">dsId</span><span class="p">,</span> <span class="nx">cfName</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Return a Flot compatible data series asynchronously.</span>
<span class="cm">     *</span>
<span class="cm">     * @method getData</span>
<span class="cm">     * @param startTime {Number} The start timestamp</span>
<span class="cm">     * @param endTime {Number} The end timestamp</span>
<span class="cm">     * @param dsId {Variant} identifier of the RRD datasource (string or number)</span>
<span class="cm">     * @return {Object} A Deferred which calls back with a flot data series.</span>
<span class="cm">     **/</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lastUpdate</span> <span class="o">&lt;</span> <span class="nx">endTime</span><span class="o">/</span><span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_download</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_callRemote</span><span class="p">(</span><span class="s1">&#39;getData&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">endTime</span><span class="p">,</span> <span class="nx">dsId</span><span class="p">,</span> <span class="nx">cfName</span><span class="p">]);</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryRemote</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getDSNames</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Return a list of RRD Data Source names</span>
<span class="cm">     *</span>
<span class="cm">     * @method getDSNames</span>
<span class="cm">     * @return {Object} A Deferred which calls back with an array of DS names.</span>
<span class="cm">     **/</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_callRemote</span><span class="p">(</span><span class="s1">&#39;getDSNames&#39;</span><span class="p">);</span>
<span class="p">};</span>


<span class="cm">/**</span>
<span class="cm"> * Wraps RrdQueryRemote to provide access to a different RRD DSs within a</span>
<span class="cm"> * single RrdDataSource.</span>
<span class="cm"> *</span>
<span class="cm"> * @class jarmon.RrdQueryDsProxy</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param rrdQuery {Object} An RrdQueryRemote instance</span>
<span class="cm"> * @param dsId {Variant} identifier of the RRD datasource (string or number)</span>
<span class="cm"> **/</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryDsProxy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">rrdQuery</span><span class="p">,</span> <span class="nx">dsId</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">rrdQuery</span> <span class="o">=</span> <span class="nx">rrdQuery</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">dsId</span> <span class="o">=</span> <span class="nx">dsId</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">unit</span> <span class="o">=</span> <span class="nx">rrdQuery</span><span class="p">.</span><span class="nx">unit</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryDsProxy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">endTime</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Call I{RrdQueryRemote.getData} with a particular dsId</span>
<span class="cm">     *</span>
<span class="cm">     * @method getData</span>
<span class="cm">     * @param startTime {Number} A unix timestamp marking the start time</span>
<span class="cm">     * @param endTime {Number} A unix timestamp marking the start time</span>
<span class="cm">     * @return {Object} A Deferred which calls back with a flot data series.</span>
<span class="cm">     **/</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rrdQuery</span><span class="p">.</span><span class="nx">getData</span><span class="p">(</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">endTime</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">dsId</span><span class="p">);</span>
<span class="p">};</span>


<span class="cm">/**</span>
<span class="cm"> * A class for creating a Flot chart from a series of RRD Queries</span>
<span class="cm"> *</span>
<span class="cm"> * @class jarmon.Chart</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param template {Object} A jQuery containing a single element into which the</span>
<span class="cm"> *      chart will be drawn</span>
<span class="cm"> * @param options {Object} Flot options which control how the chart should be</span>
<span class="cm"> *      drawn.</span>
<span class="cm"> **/</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">template</span><span class="p">,</span> <span class="nx">recipe</span><span class="p">,</span>  <span class="nx">downloader</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">template</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">recipe</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">downloader</span> <span class="o">=</span> <span class="nx">downloader</span><span class="p">;</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="p">{</span><span class="nx">yaxis</span><span class="o">:</span> <span class="p">{}},</span> <span class="nx">recipe</span><span class="p">.</span><span class="nx">options</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">setup</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>


    <span class="c1">// Listen for clicks on the legend items - onclick enable / disable the</span>
    <span class="c1">// corresponding data source.</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.graph-legend .legendItem&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">switchDataEnabled</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">yaxis</span><span class="p">.</span><span class="nx">ticks</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">axis</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/*</span>
<span class="cm">         * Choose a suitable SI multiplier based on the min and max values from</span>
<span class="cm">         * the axis and then generate appropriate yaxis tick labels.</span>
<span class="cm">         *</span>
<span class="cm">         * @param axis: An I{Object} with min and max properties</span>
<span class="cm">         * @return: An array of ~5 tick labels</span>
<span class="cm">         */</span>
        <span class="kd">var</span> <span class="nx">siPrefixes</span> <span class="o">=</span> <span class="p">{</span>
            <span class="mi">0</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
            <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;K&#39;</span><span class="p">,</span>
            <span class="mi">2</span><span class="o">:</span> <span class="s1">&#39;M&#39;</span><span class="p">,</span>
            <span class="mi">3</span><span class="o">:</span> <span class="s1">&#39;G&#39;</span><span class="p">,</span>
            <span class="mi">4</span><span class="o">:</span> <span class="s1">&#39;T&#39;</span>
        <span class="p">};</span>
        <span class="kd">var</span> <span class="nx">si</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="nx">si</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mf">0.9</span> <span class="o">&gt;</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">max</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">si</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kd">var</span> <span class="nx">minVal</span> <span class="o">=</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">min</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="nx">si</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">maxVal</span> <span class="o">=</span> <span class="nx">axis</span><span class="p">.</span><span class="nx">max</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="nx">si</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">stepSizes</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span>
                         <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">250</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">realStep</span> <span class="o">=</span> <span class="p">(</span><span class="nx">maxVal</span> <span class="o">-</span> <span class="nx">minVal</span><span class="p">)</span><span class="o">/</span><span class="mf">5.0</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">stepSize</span><span class="p">,</span> <span class="nx">decimalPlaces</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">stepSizes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">stepSize</span> <span class="o">=</span> <span class="nx">stepSizes</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">realStep</span> <span class="o">&lt;</span> <span class="nx">stepSize</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">stepSize</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">decimalPlaces</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">yaxis</span><span class="p">.</span><span class="nx">tickDecimals</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">decimalPlaces</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">yaxis</span><span class="p">.</span><span class="nx">tickDecimals</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kd">var</span> <span class="nx">tickMin</span> <span class="o">=</span> <span class="nx">minVal</span> <span class="o">-</span> <span class="nx">minVal</span> <span class="o">%</span> <span class="nx">stepSize</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">tickMax</span> <span class="o">=</span> <span class="nx">maxVal</span> <span class="o">-</span> <span class="nx">maxVal</span> <span class="o">%</span> <span class="nx">stepSize</span> <span class="o">+</span> <span class="nx">stepSize</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">ticks</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">tickMin</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;=</span><span class="nx">tickMax</span><span class="p">;</span> <span class="nx">j</span><span class="o">+=</span><span class="nx">stepSize</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">ticks</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
                <span class="nx">j</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="nx">si</span><span class="p">),</span>
                <span class="nx">j</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="nx">decimalPlaces</span><span class="p">)</span>
            <span class="p">]);</span>
        <span class="p">}</span>

        <span class="nx">self</span><span class="p">.</span><span class="nx">siPrefix</span> <span class="o">=</span> <span class="nx">siPrefixes</span><span class="p">[</span><span class="nx">si</span><span class="p">];</span>

        <span class="k">return</span> <span class="nx">ticks</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.title&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">recipe</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">var</span> <span class="nx">recipe</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">recipe</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">dataDict</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">rrd</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
        <span class="c1">// Test for integer DS index as opposed to DS name</span>
        <span class="kd">var</span> <span class="nx">dsi</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">ds</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">ds</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">===</span> <span class="nx">dsi</span><span class="p">.</span><span class="nx">toString</span><span class="p">())</span> <span class="p">{</span>
            <span class="nx">ds</span> <span class="o">=</span> <span class="nx">dsi</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">unit</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="mi">3</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">transformer</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="mi">4</span><span class="p">];</span>

        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">dataDict</span><span class="p">[</span><span class="nx">rrd</span><span class="p">])</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">dataDict</span><span class="p">[</span><span class="nx">rrd</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryRemote</span><span class="p">(</span>
                <span class="nx">rrd</span><span class="p">,</span> <span class="nx">unit</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">downloader</span><span class="p">,</span> <span class="nx">transformer</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">addData</span><span class="p">(</span><span class="nx">label</span><span class="p">,</span> <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryDsProxy</span><span class="p">(</span><span class="nx">dataDict</span><span class="p">[</span><span class="nx">rrd</span><span class="p">],</span> <span class="nx">ds</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">label</span><span class="p">,</span> <span class="nx">db</span><span class="p">,</span> <span class="nx">enabled</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Add details of a remote RRD data source whose data will be added to this</span>
<span class="cm">     * chart.</span>
<span class="cm">     *</span>
<span class="cm">     * @method addData</span>
<span class="cm">     * @param label {String} The label for this data which will be shown in the</span>
<span class="cm">     *               chart legend</span>
<span class="cm">     * @param db {String} The url of the remote RRD database</span>
<span class="cm">     * @param enabled {Boolean} true if you want this data plotted on the chart,</span>
<span class="cm">     *      false if not.</span>
<span class="cm">     **/</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">enabled</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">enabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">label</span><span class="p">,</span> <span class="nx">db</span><span class="p">,</span> <span class="nx">enabled</span><span class="p">]);</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">switchDataEnabled</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">label</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Enable / Disable a single data source</span>
<span class="cm">     *</span>
<span class="cm">     * @method switchDataEnabled</span>
<span class="cm">     * @param label {String} The label of the data source to be enabled /</span>
<span class="cm">     *      disabled.</span>
<span class="cm">     **/</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="nx">label</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setTimeRange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">endTime</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Alter the time range of this chart and redraw</span>
<span class="cm">     *</span>
<span class="cm">     * @method setTimeRange</span>
<span class="cm">     * @param startTime {Number} The start timestamp</span>
<span class="cm">     * @param endTime {Number} The end timestamp</span>
<span class="cm">     **/</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">startTime</span> <span class="o">=</span> <span class="nx">startTime</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">endTime</span> <span class="o">=</span> <span class="nx">endTime</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Draw the chart</span>
<span class="cm">     * A &#39;chart_loading&#39; event is triggered before the data is requested</span>
<span class="cm">     * A &#39;chart_loaded&#39; event is triggered when the chart has been drawn</span>
<span class="cm">     *</span>
<span class="cm">     * @method draw</span>
<span class="cm">     * @return {Object} A Deferred which calls back with the chart data when</span>
<span class="cm">     *      the chart has been rendered.</span>
<span class="cm">     **/</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;loading&#39;</span><span class="p">);</span>

    <span class="kd">var</span> <span class="nx">result</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">result</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="nx">getData</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">endTime</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// If the data source has been marked as disabled return a fake</span>
            <span class="c1">// empty dataset</span>
            <span class="c1">// 0 values so that it can contribute to a stacked chart.</span>
            <span class="c1">// 0 linewidth so that it doesn&#39;t cause a line in stacked chart</span>
            <span class="nx">result</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">data</span><span class="o">:</span> <span class="p">[</span>
                    <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
                    <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">endTime</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
                <span class="p">],</span>
                <span class="nx">lines</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">lineWidth</span><span class="o">:</span> <span class="mi">0</span>
                <span class="p">}</span>
            <span class="p">};</span>
        <span class="p">}</span>

        <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">when</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">results</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
            <span class="c1">// Clear any previous error messages.</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.error&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">().</span><span class="nx">hide</span><span class="p">();</span>

            <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">label</span><span class="p">,</span> <span class="nx">disabled</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="kd">var</span> <span class="nx">unit</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">label</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">label</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">label</span> <span class="o">=</span> <span class="nx">label</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">unit</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// Just use the last unit for now</span>
                    <span class="nx">unit</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">unit</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">self</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span> <span class="p">{</span>
                    <span class="nx">disabled</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">label</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="nx">$</span><span class="p">.</span><span class="nx">plot</span><span class="p">(</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.chart&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">().</span><span class="nx">show</span><span class="p">(),</span>
                <span class="nx">data</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">options</span><span class="p">);</span>

            <span class="kd">var</span> <span class="nx">yaxisUnitLabel</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">siPrefix</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="s1">&#39;width&#39;</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;position&#39;</span><span class="o">:</span> <span class="s1">&#39;absolute&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;top&#39;</span><span class="o">:</span> <span class="s1">&#39;80px&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;left&#39;</span><span class="o">:</span> <span class="s1">&#39;-110px&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;text-align&#39;</span><span class="o">:</span> <span class="s1">&#39;right&#39;</span><span class="p">});</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.chart&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">yaxisUnitLabel</span><span class="p">);</span>

            <span class="c1">// Manipulate and move the flot generated legend to an</span>
            <span class="c1">// alternative position.</span>
            <span class="c1">// The default legend is formatted as an HTML table, so we</span>
            <span class="c1">// grab the contents of the cells and turn them into</span>
            <span class="c1">// divs.</span>
            <span class="c1">// Actually, formatting the legend first as a one column</span>
            <span class="c1">// table is useful as it generates an optimum label element</span>
            <span class="c1">// width which we can copy to the new divs + a little extra</span>
            <span class="c1">// to accomodate the color box</span>
            <span class="kd">var</span> <span class="nx">legend</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.graph-legend&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
            <span class="nx">legend</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.legendLabel&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span>
                <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">orig</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">el</span><span class="p">);</span>
                    <span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">orig</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
                    <span class="kd">var</span> <span class="nx">newEl</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div /&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
                        <span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;legendItem&#39;</span><span class="p">,</span>
                        <span class="s1">&#39;title&#39;</span><span class="o">:</span> <span class="p">(</span><span class="s1">&#39;Data series switch - &#39;</span> <span class="o">+</span>
                                  <span class="s1">&#39;click to turn this data series on or off&#39;</span><span class="p">)</span>
                    <span class="p">})</span>
                        <span class="p">.</span><span class="nx">width</span><span class="p">(</span><span class="nx">orig</span><span class="p">.</span><span class="nx">width</span><span class="p">()</span><span class="o">+</span><span class="mi">20</span><span class="p">)</span>
                        <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">label</span><span class="p">)</span>
                        <span class="p">.</span><span class="nx">prepend</span><span class="p">(</span>
                            <span class="nx">orig</span><span class="p">.</span><span class="nx">prev</span><span class="p">()</span>
                                <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div div&#39;</span><span class="p">)</span>
                                <span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;legendColorBox&#39;</span><span class="p">))</span>
                        <span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">legend</span><span class="p">);</span>
                    <span class="c1">// The legend label is clickable - to enable /</span>
                    <span class="c1">// disable different data series. The disabled class</span>
                    <span class="c1">// results in a label formatted with strike though</span>
                    <span class="k">if</span><span class="p">(</span> <span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">label</span><span class="p">,</span> <span class="nx">disabled</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
                        <span class="nx">newEl</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
            <span class="nx">legend</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div /&gt;&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;clear&#39;</span><span class="p">,</span> <span class="s1">&#39;both&#39;</span><span class="p">));</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.legend&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>

            <span class="nx">yaxisUnitLabel</span><span class="p">.</span><span class="nx">position</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">position</span><span class="p">());</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
        <span class="p">},</span> <span class="kc">null</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">fail</span><span class="p">(</span>
            <span class="kd">function</span><span class="p">(</span><span class="nx">failure</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.chart&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">().</span><span class="nx">hide</span><span class="p">();</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.graph-legend&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">().</span><span class="nx">hide</span><span class="p">();</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.error&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span>
                    <span class="s1">&#39;error: &#39;</span> <span class="o">+</span> <span class="nx">failure</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>

            <span class="p">})</span>
        <span class="p">.</span><span class="nx">always</span><span class="p">(</span>
            <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;loading&#39;</span><span class="p">);</span>
                <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
            <span class="p">});</span>
<span class="p">};</span>


<span class="cm">/**</span>
<span class="cm"> * Generate a form through which to choose a data source from a remote RRD file</span>
<span class="cm"> *</span>
<span class="cm"> * @class jarmon.RrdChooser</span>
<span class="cm"> * @constructor</span>
<span class="cm"> **/</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdChooser</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$tpl</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span> <span class="o">=</span> <span class="nx">$tpl</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">rrdUrl</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
        <span class="nx">dsName</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
        <span class="nx">dsLabel</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
        <span class="nx">dsUnit</span><span class="o">:</span><span class="s1">&#39;&#39;</span>
    <span class="p">};</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdChooser</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">drawRrdUrlForm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;form/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Enter the URL of an RRD file&#39;</span><span class="p">),</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;label/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                <span class="s1">&#39;URL: &#39;</span><span class="p">,</span>
                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span>
                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;rrd_url&#39;</span><span class="p">,</span>
                    <span class="nx">value</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">rrdUrl</span>
                <span class="p">})</span>
            <span class="p">),</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;type&#39;</span><span class="o">:</span> <span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;download&#39;</span><span class="p">}),</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;next&#39;</span><span class="p">})</span>
        <span class="p">)</span>
    <span class="p">).</span><span class="nx">submit</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">rrdUrl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">rrd_url</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">$placeholder</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.next&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
            <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdQueryRemote</span><span class="p">(</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">rrdUrl</span><span class="p">).</span><span class="nx">getDSNames</span><span class="p">().</span><span class="nx">addCallback</span><span class="p">(</span>
                <span class="kd">function</span><span class="p">(</span><span class="nx">$placeholder</span><span class="p">,</span> <span class="nx">dsNames</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">dsNames</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span>
                            <span class="s1">&#39;The RRD file contains multiple data sources. &#39;</span> <span class="o">+</span>
                                <span class="s1">&#39;Choose one:&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$placeholder</span><span class="p">);</span>

                        <span class="nx">$</span><span class="p">(</span><span class="nx">dsNames</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span>
                            <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
                                <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
                                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span>
                                    <span class="nx">value</span><span class="o">:</span> <span class="nx">el</span>
                                <span class="p">}</span>
                            <span class="p">).</span><span class="nx">click</span><span class="p">(</span>
                                <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                                    <span class="nx">self</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">dsName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
                                    <span class="nx">self</span><span class="p">.</span><span class="nx">drawDsLabelForm</span><span class="p">();</span>
                                <span class="p">}</span>
                            <span class="p">);</span>
                        <span class="p">}).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$placeholder</span><span class="p">);</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="nx">self</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">dsName</span> <span class="o">=</span> <span class="nx">dsNames</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
                        <span class="nx">self</span><span class="p">.</span><span class="nx">drawDsLabelForm</span><span class="p">();</span>
                    <span class="p">}</span>
                <span class="p">},</span> <span class="nx">$placeholder</span>
            <span class="p">).</span><span class="nx">addErrback</span><span class="p">(</span>
                <span class="kd">function</span><span class="p">(</span><span class="nx">$placeholder</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;error&#39;</span><span class="p">})</span>
                        <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">toString</span><span class="p">()).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$placeholder</span><span class="p">);</span>
                <span class="p">},</span> <span class="nx">$placeholder</span>
            <span class="p">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdChooser</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">drawDsLabelForm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;form/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Choose a label and unit for this data source.&#39;</span><span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;label/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                <span class="s1">&#39;Label: &#39;</span><span class="p">,</span>
                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span>
                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;dsLabel&#39;</span><span class="p">,</span>
                    <span class="nx">value</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">dslabel</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">dsName</span>
                <span class="p">})</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;label/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                <span class="s1">&#39;Unit: &#39;</span><span class="p">,</span>
                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span>
                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;dsUnit&#39;</span><span class="p">,</span>
                    <span class="nx">value</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">dsUnit</span>
                <span class="p">})</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;back&#39;</span><span class="p">}).</span><span class="nx">click</span><span class="p">(</span>
            <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">drawRrdUrlForm</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;save&#39;</span><span class="p">}),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;next&#39;</span><span class="p">})</span>
    <span class="p">).</span><span class="nx">submit</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">dsLabel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dsLabel</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">dsUnit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dsUnit</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">drawDsSummary</span><span class="p">();</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">);</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">RrdChooser</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">drawDsSummary</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>

    <span class="nx">jQuery</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;strong/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span>
            <span class="p">[</span><span class="s1">&#39;: &#39;</span><span class="p">,</span> <span class="nx">el</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
        <span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;back&#39;</span><span class="p">}).</span><span class="nx">click</span><span class="p">(</span>
            <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">drawDsLabelForm</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;finish&#39;</span><span class="p">})</span>
    <span class="p">);</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartEditor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$tpl</span><span class="p">,</span> <span class="nx">chart</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span> <span class="o">=</span> <span class="nx">$tpl</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">chart</span> <span class="o">=</span> <span class="nx">chart</span><span class="p">;</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">live</span><span class="p">(</span>
        <span class="s1">&#39;submit&#39;</span><span class="p">,</span>
        <span class="p">{</span><span class="nx">self</span><span class="o">:</span> <span class="k">this</span><span class="p">},</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">self</span><span class="p">;</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">chart</span><span class="p">.</span><span class="nx">recipe</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">chart</span><span class="p">.</span><span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.datasources tbody tr&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span>
                <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">el</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input[type=text]&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span>
                        <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
                            <span class="k">return</span> <span class="nx">el</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">);</span>
                <span class="p">}</span>
            <span class="p">);</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">chart</span><span class="p">.</span><span class="nx">setup</span><span class="p">();</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">chart</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">live</span><span class="p">(</span>
        <span class="s1">&#39;reset&#39;</span><span class="p">,</span>
        <span class="p">{</span><span class="nx">self</span><span class="o">:</span> <span class="k">this</span><span class="p">},</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">self</span><span class="p">;</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form input[name=datasource_delete]&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">live</span><span class="p">(</span>
        <span class="s1">&#39;click&#39;</span><span class="p">,</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form input[name=datasource_add]&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">live</span><span class="p">(</span>
        <span class="s1">&#39;click&#39;</span><span class="p">,</span>
        <span class="p">{</span><span class="nx">self</span><span class="o">:</span> <span class="k">this</span><span class="p">},</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">self</span><span class="p">;</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">_addDatasourceRow</span><span class="p">(</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">_extractRowValues</span><span class="p">(</span>
                    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">)</span>
                <span class="p">)</span>
            <span class="p">);</span>
            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input[type=text]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">);</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartEditor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;form/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;label/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                <span class="s1">&#39;Title: &#39;</span><span class="p">,</span>
                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span>
                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span>
                    <span class="nx">value</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">chart</span><span class="p">.</span><span class="nx">recipe</span><span class="p">.</span><span class="nx">title</span>
                <span class="p">})</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;fieldset/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;legend/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Data Sources&#39;</span><span class="p">),</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;table/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;datasources&#39;</span><span class="p">}).</span><span class="nx">append</span><span class="p">(</span>
                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;thead/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tr/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;th/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;RRD File&#39;</span><span class="p">),</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;th/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;DS Name&#39;</span><span class="p">),</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;th/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;DS Label&#39;</span><span class="p">),</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;th/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;DS Unit&#39;</span><span class="p">),</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;th/&gt;&#39;</span><span class="p">)</span>
                    <span class="p">)</span>
                <span class="p">),</span>
                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tfoot/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tr/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">})</span>
                        <span class="p">),</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">})</span>
                        <span class="p">),</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">})</span>
                        <span class="p">),</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">})</span>
                        <span class="p">),</span>
                        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
                            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
                                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span>
                                <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;add&#39;</span><span class="p">,</span>
                                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;datasource_add&#39;</span>
                            <span class="p">})</span>
                        <span class="p">)</span>
                    <span class="p">)</span>
                <span class="p">),</span>
                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tbody/&gt;&#39;</span><span class="p">)</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;save&#39;</span><span class="p">}),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;reset&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;reset&#39;</span><span class="p">})</span>
    <span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">chart</span><span class="p">.</span><span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_addDatasourceRow</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">chart</span><span class="p">.</span><span class="nx">recipe</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartEditor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_extractRowValues</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$row</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$row</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input[type=text]&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">el</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">);</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartEditor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_addDatasourceRow</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">record</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tr/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">record</span><span class="p">[</span><span class="mi">0</span><span class="p">]})</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">record</span><span class="p">[</span><span class="mi">1</span><span class="p">]})</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">record</span><span class="p">[</span><span class="mi">2</span><span class="p">]})</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">record</span><span class="p">[</span><span class="mi">3</span><span class="p">]})</span>
        <span class="p">),</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;td/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;input/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span>
                <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;delete&#39;</span><span class="p">,</span>
                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;datasource_delete&#39;</span>
            <span class="p">})</span>
        <span class="p">)</span>
    <span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.datasources tbody&#39;</span><span class="p">));</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">TabbedInterface</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$tpl</span><span class="p">,</span> <span class="nx">recipe</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tpl</span> <span class="o">=</span> <span class="nx">$tpl</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">recipe</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">placeholders</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">$tabBar</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;ul/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;css-tabs&#39;</span><span class="p">}).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$tpl</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tabPanels</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;css-panes charts&#39;</span><span class="p">}).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$tpl</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">tabName</span><span class="p">,</span> <span class="nx">$tabPanel</span><span class="p">,</span> <span class="nx">placeNames</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">recipe</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">tabName</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="nx">placeNames</span> <span class="o">=</span> <span class="nx">recipe</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>

        <span class="nx">$tabPanel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">newTab</span><span class="p">(</span><span class="nx">tabName</span><span class="p">);</span>

        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">placeNames</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">placeholders</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span>
                <span class="nx">placeNames</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$tabPanel</span><span class="p">)]);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">setup</span><span class="p">();</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">TabbedInterface</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">newTab</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tabName</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Add a tab</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;a/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">href</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="nx">tabName</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)}).</span><span class="nx">text</span><span class="p">(</span><span class="nx">tabName</span><span class="p">)</span>
    <span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$tabBar</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">$placeholder</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">);</span>
    <span class="c1">// Add tab panel</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$placeholder</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$tabPanels</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">$placeholder</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">TabbedInterface</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Destroy then re-initialise the jquerytools tabs plugin</span>
    <span class="kd">var</span> <span class="nx">api</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$tabBar</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;tabs&quot;</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">api</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">api</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$tabBar</span><span class="p">.</span><span class="nx">tabs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$tabPanels</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">));</span>
<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">buildTabbedChartUi</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$chartTemplate</span><span class="p">,</span> <span class="nx">chartRecipes</span><span class="p">,</span>
                                      <span class="nx">$tabTemplate</span><span class="p">,</span> <span class="nx">tabRecipes</span><span class="p">,</span>
                                      <span class="nx">$controlPanelTemplate</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Setup chart date range controls and all charts</span>
<span class="cm">     **/</span>
    <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">Parallimiter</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="kd">function</span> <span class="nx">serialDownloader</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">addCallable</span><span class="p">(</span><span class="nx">jarmon</span><span class="p">.</span><span class="nx">downloadBinary</span><span class="p">,</span> <span class="p">[</span><span class="nx">url</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">ti</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">TabbedInterface</span><span class="p">(</span><span class="nx">$tabTemplate</span><span class="p">,</span> <span class="nx">tabRecipes</span><span class="p">);</span>

    <span class="kd">var</span> <span class="nx">charts</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span>
        <span class="nx">ti</span><span class="p">.</span><span class="nx">placeholders</span><span class="p">,</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">chart</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span><span class="p">(</span>
                <span class="nx">$chartTemplate</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">el</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
                <span class="nx">chartRecipes</span><span class="p">[</span><span class="nx">el</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span>
                <span class="nx">serialDownloader</span>
            <span class="p">);</span>

            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=chart_edit]&#39;</span><span class="p">,</span> <span class="nx">el</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]).</span><span class="nx">live</span><span class="p">(</span>
                <span class="s1">&#39;click&#39;</span><span class="p">,</span>
                <span class="p">{</span><span class="nx">chart</span><span class="o">:</span> <span class="nx">chart</span><span class="p">},</span>
                <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">chart</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">chart</span><span class="p">;</span>
                    <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartEditor</span><span class="p">(</span>
                        <span class="nx">chart</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.graph-legend&#39;</span><span class="p">),</span> <span class="nx">chart</span><span class="p">).</span><span class="nx">draw</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">);</span>

            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=chart_delete]&#39;</span><span class="p">,</span> <span class="nx">el</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]).</span><span class="nx">live</span><span class="p">(</span>
                <span class="s1">&#39;click&#39;</span><span class="p">,</span>
                <span class="p">{</span><span class="nx">chart</span><span class="o">:</span> <span class="nx">chart</span><span class="p">},</span>
                <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">chart</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">chart</span><span class="p">;</span>
                    <span class="nx">chart</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">);</span>

            <span class="k">return</span> <span class="nx">chart</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="kd">var</span> <span class="nx">cc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartCoordinator</span><span class="p">(</span><span class="nx">$controlPanelTemplate</span><span class="p">,</span> <span class="nx">charts</span><span class="p">);</span>
    <span class="c1">// Update charts when tab is clicked</span>
    <span class="nx">ti</span><span class="p">.</span><span class="nx">$tpl</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.css-tabs:first&quot;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span>
        <span class="s1">&#39;click&#39;</span><span class="p">,</span>
        <span class="p">{</span><span class="s1">&#39;cc&#39;</span><span class="o">:</span> <span class="nx">cc</span><span class="p">},</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">cc</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">cc</span><span class="p">;</span>
            <span class="c1">// XXX: Hack to give the tab just enough time to become visible</span>
            <span class="c1">// so that flot can calculate chart dimensions.</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">t</span><span class="p">);</span>
            <span class="nx">cc</span><span class="p">.</span><span class="nx">t</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span>
                <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="nx">cc</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
                <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="c1">// Initialise all the charts</span>
    <span class="nx">cc</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>

    <span class="k">return</span> <span class="p">[</span><span class="nx">charts</span><span class="p">,</span> <span class="nx">ti</span><span class="p">,</span> <span class="nx">cc</span><span class="p">];</span>
<span class="p">};</span>


<span class="c1">// Options common to all the chart on this page</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span><span class="p">.</span><span class="nx">BASE_OPTIONS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">grid</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">clickable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="nx">borderColor</span><span class="o">:</span> <span class="s2">&quot;#000&quot;</span><span class="p">,</span>
        <span class="nx">color</span><span class="o">:</span> <span class="s2">&quot;#000&quot;</span><span class="p">,</span>
        <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s2">&quot;#fff&quot;</span><span class="p">,</span>
        <span class="nx">tickColor</span><span class="o">:</span> <span class="s2">&quot;#eee&quot;</span>
    <span class="p">},</span>
    <span class="nx">legend</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;nw&#39;</span><span class="p">,</span>
        <span class="nx">noColumns</span><span class="o">:</span> <span class="mi">1</span>
    <span class="p">},</span>
    <span class="nx">selection</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;x&#39;</span>
    <span class="p">},</span>
    <span class="nx">series</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">points</span><span class="o">:</span> <span class="p">{</span> <span class="nx">show</span><span class="o">:</span> <span class="kc">false</span> <span class="p">},</span>
        <span class="nx">lines</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">show</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="nx">steps</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="nx">shadowSize</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nx">lineWidth</span><span class="o">:</span> <span class="mi">1</span>
        <span class="p">},</span>
        <span class="nx">shadowSize</span><span class="o">:</span> <span class="mi">0</span>
    <span class="p">},</span>
    <span class="nx">xaxis</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">mode</span><span class="o">:</span> <span class="s2">&quot;time&quot;</span><span class="p">,</span>
        <span class="nx">tickFormatter</span><span class="o">:</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">localTimeFormatter</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// Extra options to generate a stacked chart</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Chart</span><span class="p">.</span><span class="nx">STACKED_OPTIONS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">series</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">stack</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">lines</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">fill</span><span class="o">:</span> <span class="mf">0.5</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="c1">// A selection of useful time ranges</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">timeRangeShortcuts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s1">&#39;last hour&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="nx">now</span><span class="o">-</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">1</span><span class="p">,</span> <span class="nx">now</span><span class="p">];</span> <span class="p">}],</span>
    <span class="p">[</span><span class="s1">&#39;last 3 hours&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="nx">now</span><span class="o">-</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span> <span class="nx">now</span><span class="p">];</span> <span class="p">}],</span>
    <span class="p">[</span><span class="s1">&#39;last 6 hours&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="nx">now</span><span class="o">-</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">6</span><span class="p">,</span> <span class="nx">now</span><span class="p">];</span> <span class="p">}],</span>
    <span class="p">[</span><span class="s1">&#39;last 12 hours&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="nx">now</span><span class="o">-</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">12</span><span class="p">,</span> <span class="nx">now</span><span class="p">];</span> <span class="p">}],</span>
    <span class="p">[</span><span class="s1">&#39;last day&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="nx">now</span><span class="o">-</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">24</span><span class="p">,</span> <span class="nx">now</span><span class="p">];</span> <span class="p">}],</span>
    <span class="p">[</span><span class="s1">&#39;last week&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="nx">now</span><span class="o">-</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="p">,</span> <span class="nx">now</span><span class="p">];</span> <span class="p">}],</span>
    <span class="p">[</span><span class="s1">&#39;last month&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="nx">now</span><span class="o">-</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">31</span><span class="p">,</span> <span class="nx">now</span><span class="p">];</span> <span class="p">}],</span>
    <span class="p">[</span><span class="s1">&#39;last year&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="nx">now</span><span class="o">-</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">365</span><span class="p">,</span> <span class="nx">now</span><span class="p">];</span> <span class="p">}]</span>
<span class="p">];</span>


<span class="cm">/**</span>
<span class="cm"> * Presents the user with a form and a timeline with which they can choose a</span>
<span class="cm"> * time range and co-ordinates the refreshing of a series of charts.</span>
<span class="cm"> *</span>
<span class="cm"> * @class jarmon.ChartCoordinator</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param ui {Object} A one element jQuery containing an input form and</span>
<span class="cm"> *      placeholders for the timeline and for the series of charts.</span>
<span class="cm"> **/</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartCoordinator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ui</span><span class="p">,</span> <span class="nx">charts</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span> <span class="o">=</span> <span class="nx">ui</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">charts</span> <span class="o">=</span> <span class="nx">charts</span><span class="p">;</span>

    <span class="c1">// Style and configuration of the range timeline</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">rangePreviewOptions</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">grid</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span>
        <span class="p">},</span>
        <span class="nx">selection</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;x&#39;</span>
        <span class="p">},</span>
        <span class="nx">xaxis</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;time&#39;</span><span class="p">,</span>
            <span class="nx">tickFormatter</span><span class="o">:</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">localTimeFormatter</span>
        <span class="p">},</span>
        <span class="nx">yaxis</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">ticks</span><span class="o">:</span> <span class="p">[]</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;select[name=&quot;from_standard&quot;]&#39;</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">jarmon</span><span class="p">.</span><span class="nx">timeRangeShortcuts</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">options</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;option /&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">jarmon</span><span class="p">.</span><span class="nx">timeRangeShortcuts</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]));</span>
    <span class="p">}</span>

    <span class="c1">// Append a custom option for when the user selects an area of the graph</span>
    <span class="nx">options</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;option /&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">));</span>
    <span class="c1">// Select the first shortcut by default</span>
    <span class="nx">options</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">jarmon</span><span class="p">.</span><span class="nx">timeRangeShortcuts</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>

    <span class="nx">options</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// No point in updating if the user chose custom.</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">!==</span> <span class="s1">&#39;custom&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="c1">// Update the time ranges and redraw charts when the custom datetime inputs</span>
    <span class="c1">// are changed</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from_custom&quot;]&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from_standard&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">tzoffset</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;tzoffset&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="mi">10</span><span class="p">);</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">setTimeRange</span><span class="p">(</span>
                <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39; UTC&#39;</span><span class="p">).</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">-</span> <span class="nx">tzoffset</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;to_custom&quot;]&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from_standard&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">tzoffset</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;tzoffset&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="mi">10</span><span class="p">);</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">setTimeRange</span><span class="p">(</span>
                <span class="kc">null</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39; UTC&#39;</span><span class="p">).</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">-</span> <span class="nx">tzoffset</span><span class="p">);</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="c1">// Populate a list of tzoffset options if the element is present in the</span>
    <span class="c1">// template as a select list</span>
    <span class="kd">var</span> <span class="nx">tzoffsetEl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;tzoffset&quot;]&#39;</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">tzoffsetEl</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="s1">&#39;select&#39;</span><span class="p">))</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">label</span><span class="p">,</span> <span class="nx">val</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=-</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">label</span> <span class="o">=</span> <span class="s1">&#39;UTC&#39;</span><span class="p">;</span>
            <span class="nx">val</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">val</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">label</span> <span class="o">+=</span> <span class="s1">&#39; + &#39;</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">label</span> <span class="o">+=</span> <span class="s1">&#39; - &#39;</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">val</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">val</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">label</span> <span class="o">+=</span> <span class="s1">&#39;0&#39;</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">label</span> <span class="o">+=</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;00&#39;</span><span class="p">;</span>
            <span class="nx">tzoffsetEl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span>
                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;option /&gt;&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="nx">i</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">label</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="nx">tzoffsetEl</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="c1">// Default timezone offset based on localtime</span>
    <span class="kd">var</span> <span class="nx">tzoffset</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTimezoneOffset</span><span class="p">()</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span>
    <span class="nx">tzoffsetEl</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">tzoffset</span><span class="p">);</span>

    <span class="c1">// Update the time ranges and redraw charts when the form is submitted</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;action&quot;]&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="c1">// When a selection is made on the range timeline, or any of my charts</span>
    <span class="c1">// redraw all the charts.</span>
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span>
        <span class="s1">&#39;plotselected&#39;</span><span class="p">,</span>
        <span class="p">{</span><span class="nx">self</span><span class="o">:</span> <span class="k">this</span><span class="p">},</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">ranges</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">self</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">eventSourceIsMine</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

            <span class="c1">// plotselected event may be from my range selector chart or</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
                <span class="nx">eventSourceIsMine</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// ...it may come from one of the charts under my supervision</span>
                <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">self</span><span class="p">.</span><span class="nx">charts</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">charts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">template</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">eventSourceIsMine</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="nx">eventSourceIsMine</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// Update the prepared time range select box to value &quot;custom&quot;</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from_standard&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">);</span>

                <span class="c1">// Update all my charts</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">setTimeRange</span><span class="p">(</span><span class="nx">ranges</span><span class="p">.</span><span class="nx">xaxis</span><span class="p">.</span><span class="nx">from</span><span class="p">,</span> <span class="nx">ranges</span><span class="p">.</span><span class="nx">xaxis</span><span class="p">.</span><span class="nx">to</span><span class="p">);</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="c1">// Add dhtml calendars to the date input fields</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.timerange_control img&quot;</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">dateinput</span><span class="p">({</span>
            <span class="s1">&#39;format&#39;</span><span class="o">:</span> <span class="s1">&#39;dd mmm yyyy 00:00:00&#39;</span><span class="p">,</span>
            <span class="s1">&#39;max&#39;</span><span class="o">:</span> <span class="o">+</span><span class="mi">1</span><span class="p">,</span>
            <span class="s1">&#39;css&#39;</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;input&#39;</span><span class="o">:</span> <span class="s1">&#39;jquerytools_date&#39;</span><span class="p">}})</span>
        <span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;onBeforeShow&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">classes</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">currentDate</span><span class="p">,</span> <span class="nx">input_selector</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="nx">classes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">input_selector</span> <span class="o">=</span> <span class="s1">&#39;[name=&quot;&#39;</span> <span class="o">+</span> <span class="nx">classes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;&quot;]&#39;</span><span class="p">;</span>
                <span class="c1">// Look for a neighboring input element whose name matches the</span>
                <span class="c1">// class name of this calendar</span>
                <span class="c1">// Parse the value as a date if the returned date.getTime</span>
                <span class="c1">// returns NaN we know it&#39;s an invalid date</span>
                <span class="c1">// XXX: is there a better way to check for valid date?</span>
                <span class="nx">currentDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">siblings</span><span class="p">(</span><span class="nx">input_selector</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">currentDate</span><span class="p">.</span><span class="nx">getTime</span><span class="p">())</span> <span class="p">)</span> <span class="p">{</span>
                    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span>
                        <span class="s1">&#39;dateinput&#39;</span><span class="p">).</span><span class="nx">_initial_val</span> <span class="o">=</span> <span class="nx">currentDate</span><span class="p">.</span><span class="nx">getTime</span><span class="p">();</span>
                    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;dateinput&#39;</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">currentDate</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">bind</span><span class="p">(</span>
            <span class="s1">&#39;onHide&#39;</span><span class="p">,</span>
            <span class="p">{</span><span class="nx">self</span><span class="o">:</span> <span class="k">this</span><span class="p">},</span>
            <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">self</span><span class="p">;</span>
                <span class="c1">// Called after a calendar date has been chosen by the user.</span>
                <span class="c1">// Use the sibling selector that we generated above</span>
                <span class="c1">// before opening the calendar</span>
                <span class="kd">var</span> <span class="nx">oldStamp</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;dateinput&#39;</span><span class="p">).</span><span class="nx">_initial_val</span><span class="p">;</span>
                <span class="kd">var</span> <span class="nx">newDate</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;dateinput&#39;</span><span class="p">).</span><span class="nx">getValue</span><span class="p">();</span>
                <span class="c1">// Only update the form field if the date has changed.</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">oldStamp</span> <span class="o">!==</span> <span class="nx">newDate</span><span class="p">.</span><span class="nx">getTime</span><span class="p">())</span> <span class="p">{</span>
                    <span class="c1">// Update the prepared time range select box to</span>
                    <span class="c1">// value &quot;custom&quot;</span>
                    <span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from_standard&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">);</span>
                    <span class="kd">var</span> <span class="nx">from</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
                    <span class="kd">var</span> <span class="nx">to</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s1">&#39;from_custom&#39;</span><span class="p">)){</span>
                        <span class="nx">from</span> <span class="o">=</span> <span class="nx">newDate</span><span class="p">.</span><span class="nx">getTime</span><span class="p">();</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="nx">to</span> <span class="o">=</span> <span class="nx">newDate</span><span class="p">.</span><span class="nx">getTime</span><span class="p">();</span>
                    <span class="p">}</span>
                    <span class="nx">self</span><span class="p">.</span><span class="nx">setTimeRange</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
                    <span class="nx">self</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">});</span>

    <span class="c1">// Avoid overlaps between the calendars</span>
    <span class="c1">// XXX: This is a bit of hack, what if there&#39;s more than one set of calendar</span>
    <span class="c1">// controls on a page?</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.timerange_control img.from_custom&quot;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span>
        <span class="s1">&#39;onBeforeShow&#39;</span><span class="p">,</span>
        <span class="p">{</span><span class="nx">self</span><span class="o">:</span> <span class="k">this</span><span class="p">},</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">self</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">otherVal</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.timerange_control [name=&quot;to_custom&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>

            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;dateinput&#39;</span><span class="p">).</span><span class="nx">setMax</span><span class="p">(</span><span class="nx">otherVal</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;.timerange_control img.to_custom&quot;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span>
        <span class="s1">&#39;onBeforeShow&#39;</span><span class="p">,</span>
        <span class="p">{</span><span class="nx">self</span><span class="o">:</span> <span class="k">this</span><span class="p">},</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">self</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">otherVal</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.timerange_control [name=&quot;from_custom&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>

            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;dateinput&#39;</span><span class="p">).</span><span class="nx">setMin</span><span class="p">(</span><span class="nx">otherVal</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">);</span>

<span class="p">};</span>


<span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartCoordinator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Grab the start and end time from the ui form, highlight the range on the</span>
<span class="cm">     * range timeline and set the time range of all the charts and redraw.</span>
<span class="cm">     *</span>
<span class="cm">     * @method update</span>
<span class="cm">     **/</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">selection</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from_standard&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">jarmon</span><span class="p">.</span><span class="nx">timeRangeShortcuts</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">jarmon</span><span class="p">.</span><span class="nx">timeRangeShortcuts</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="nx">selection</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">range</span> <span class="o">=</span> <span class="nx">jarmon</span><span class="p">.</span><span class="nx">timeRangeShortcuts</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">](</span><span class="nx">now</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">setTimeRange</span><span class="p">(</span><span class="nx">range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">range</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="mi">10</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">endTime</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;to&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="mi">10</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">tzoffset</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;tzoffset&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="mi">10</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from_custom&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span>
        <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">startTime</span> <span class="o">+</span> <span class="nx">tzoffset</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">toUTCString</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">));</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;to_custom&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span>
        <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">endTime</span> <span class="o">+</span> <span class="nx">tzoffset</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">toUTCString</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">));</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">rangePreviewOptions</span><span class="p">.</span><span class="nx">xaxis</span><span class="p">.</span><span class="nx">tzoffset</span> <span class="o">=</span> <span class="nx">tzoffset</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">chartsLoading</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">charts</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">charts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">xaxis</span><span class="p">.</span><span class="nx">tzoffset</span> <span class="o">=</span> <span class="nx">tzoffset</span><span class="p">;</span>
        <span class="c1">// Don&#39;t render charts which are not currently visible</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">charts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">template</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="s1">&#39;:visible&#39;</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">chartsLoading</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">charts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">setTimeRange</span><span class="p">(</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">endTime</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">when</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">chartsLoading</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">chartData</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>

            <span class="kd">var</span> <span class="nx">firstUpdate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
            <span class="kd">var</span> <span class="nx">lastUpdate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">chartData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">chartData</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">chartData</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">].</span><span class="nx">firstUpdated</span> <span class="o">&lt;</span> <span class="nx">firstUpdate</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">firstUpdate</span> <span class="o">=</span> <span class="nx">chartData</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">].</span><span class="nx">firstUpdated</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">chartData</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">].</span><span class="nx">lastUpdated</span> <span class="o">&gt;</span> <span class="nx">lastUpdate</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">lastUpdate</span> <span class="o">=</span> <span class="nx">chartData</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">].</span><span class="nx">lastUpdated</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="kd">var</span> <span class="nx">ranges</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">xaxis</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">from</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">startTime</span><span class="p">,</span> <span class="nx">firstUpdate</span><span class="p">),</span>
                    <span class="nx">to</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">endTime</span><span class="p">,</span> <span class="nx">lastUpdate</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">};</span>

            <span class="c1">// Add a suitable extended head and tail to preview graph time axis</span>
            <span class="kd">var</span> <span class="nx">HOUR</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">DAY</span> <span class="o">=</span> <span class="nx">HOUR</span> <span class="o">*</span> <span class="mi">24</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">WEEK</span> <span class="o">=</span> <span class="nx">DAY</span> <span class="o">*</span> <span class="mi">7</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">MONTH</span> <span class="o">=</span> <span class="nx">DAY</span> <span class="o">*</span> <span class="mi">31</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">YEAR</span> <span class="o">=</span> <span class="nx">DAY</span> <span class="o">*</span> <span class="mi">365</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">periods</span> <span class="o">=</span> <span class="p">[</span><span class="nx">HOUR</span><span class="p">,</span> <span class="nx">HOUR</span><span class="o">*</span><span class="mi">6</span><span class="p">,</span> <span class="nx">HOUR</span><span class="o">*</span><span class="mi">12</span><span class="p">,</span>
                           <span class="nx">DAY</span><span class="p">,</span> <span class="nx">DAY</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span>
                           <span class="nx">WEEK</span><span class="p">,</span> <span class="nx">WEEK</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span>
                           <span class="nx">MONTH</span><span class="p">,</span> <span class="nx">MONTH</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span> <span class="nx">MONTH</span><span class="o">*</span><span class="mi">6</span><span class="p">,</span> <span class="nx">YEAR</span><span class="p">];</span>

            <span class="kd">var</span> <span class="nx">range</span> <span class="o">=</span> <span class="nx">ranges</span><span class="p">.</span><span class="nx">xaxis</span><span class="p">.</span><span class="nx">to</span> <span class="o">-</span> <span class="nx">ranges</span><span class="p">.</span><span class="nx">xaxis</span><span class="p">.</span><span class="nx">from</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">periods</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">range</span> <span class="o">&lt;=</span> <span class="nx">periods</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
                    <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="c1">// Dummy data for the range timeline</span>
            <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
                <span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">ranges</span><span class="p">.</span><span class="nx">xaxis</span><span class="p">.</span><span class="nx">from</span> <span class="o">-</span> <span class="nx">periods</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">firstUpdate</span><span class="p">),</span> <span class="mi">1</span><span class="p">],</span>
                <span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">ranges</span><span class="p">.</span><span class="nx">xaxis</span><span class="p">.</span><span class="nx">to</span> <span class="o">+</span> <span class="nx">periods</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">lastUpdate</span><span class="p">),</span> <span class="mi">1</span><span class="p">]];</span>

            <span class="nx">self</span><span class="p">.</span><span class="nx">rangePreview</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">plot</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.range-preview&#39;</span><span class="p">),</span> <span class="p">[</span><span class="nx">data</span><span class="p">],</span>
                                       <span class="nx">self</span><span class="p">.</span><span class="nx">rangePreviewOptions</span><span class="p">);</span>

            <span class="nx">self</span><span class="p">.</span><span class="nx">rangePreview</span><span class="p">.</span><span class="nx">setSelection</span><span class="p">(</span><span class="nx">ranges</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
        <span class="p">});</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartCoordinator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setTimeRange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Set the start and end time fields in the form and trigger an update</span>
<span class="cm">     *</span>
<span class="cm">     * @method setTimeRange</span>
<span class="cm">     * @param startTime {Number} The start timestamp</span>
<span class="cm">     * @param endTime {Number} The end timestamp</span>
<span class="cm">     **/</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">from</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">from</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;from&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">from</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">to</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[name=&quot;to&quot;]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">to</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">ChartCoordinator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * Reset all charts and the input form to the default time range - last hour</span>
<span class="cm">     *</span>
<span class="cm">     * @method init</span>
<span class="cm">     **/</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Limit the number of parallel async calls</span>
<span class="cm"> *</span>
<span class="cm"> * @class jarmon.Parallimiter</span>
<span class="cm"> * @constructor</span>
<span class="cm"> * @param limit {Number} The maximum number of in progress calls</span>
<span class="cm"> **/</span>
<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Parallimiter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">limit</span> <span class="o">=</span> <span class="nx">limit</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_callQueue</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_currentCallCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Parallimiter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addCallable</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callable</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">    * Add a function to be called when the number of in progress calls drops</span>
<span class="cm">    * below the configured limit</span>
<span class="cm">    *</span>
<span class="cm">    * @method addCallable</span>
<span class="cm">    * @param callable {Function} A function which returns a Deferred.</span>
<span class="cm">    * @param args {Array} A list of arguments to pass to the callable</span>
<span class="cm">    * @return {Object} A Deferred which fires with the result of the callable</span>
<span class="cm">    *       when it is called.</span>
<span class="cm">    **/</span>
    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_callQueue</span><span class="p">.</span><span class="nx">unshift</span><span class="p">([</span><span class="nx">d</span><span class="p">,</span> <span class="nx">callable</span><span class="p">,</span> <span class="nx">args</span><span class="p">]);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_nextCall</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">d</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">jarmon</span><span class="p">.</span><span class="nx">Parallimiter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_nextCall</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_callQueue</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_currentCallCount</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_currentCallCount</span><span class="o">++</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">nextCall</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_callQueue</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
            <span class="nx">nextCall</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">nextCall</span><span class="p">[</span><span class="mi">2</span><span class="p">]).</span><span class="nx">always</span><span class="p">(</span>
                <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">nextCall</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
                    <span class="nx">self</span><span class="p">.</span><span class="nx">_currentCallCount</span><span class="o">--</span><span class="p">;</span>
                    <span class="nx">self</span><span class="p">.</span><span class="nx">_nextCall</span><span class="p">();</span>
                <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></div>
