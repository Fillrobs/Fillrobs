{"majorversion": 1, "classmap": {"jarmon.RrdQuery": {"name": "jarmon.RrdQuery", "constructors": [{"params": [{"type": "Object", "name": "rrd", "description": "  A javascriptrrd.RRDFile"}, {"type": "String", "name": "unit", "description": "  The unit symbol for this data series"}, {"type": "Function", "name": "transformer", "description": "  A callable which performs a\ntranfsformation of the values returned from the RRD file."}], "description": "A wrapper around an instance of javascriptrrd.RRDFile which provides a\nconvenient way to query the RRDFile based on time range, RRD data source (DS)\nand RRD consolidation function (CF)."}], "namespace": "", "module": "jarmon", "guessedname": "RrdQuery", "methods": {"getData": {"return": {"type": "Object", "description": "A Flot compatible data series\neg label: '', data: [], unit: ''"}, "params": [{"type": "Number", "name": "startTimeJs", "description": "  start timestamp in microseconds"}, {"type": "Number", "name": "endTimeJs", "description": "  end timestamp in microseconds"}, {"type": "Variant", "name": "dsId", "description": "  identifier of the RRD datasource (string or number)"}, {"type": "String", "name": "cfName", "description": "  The name of an RRD consolidation function (CF)\neg AVERAGE, MIN, MAX"}], "description": "Generate a Flot compatible data object containing rows between start and\nend time. The rows are taken from the first RRA whose data spans the\nrequested time range."}, "getDSNames": {"return": {"type": "Array", "description": "An array of DS names."}, "description": "Return a list of RRD Data Source names"}}, "file": "jarmon.js", "guessedtype": "function", "shortname": "jarmon.RrdQuery", "description": "A wrapper around an instance of javascriptrrd.RRDFile which provides a\nconvenient way to query the RRDFile based on time range, RRD data source (DS)\nand RRD consolidation function (CF)."}, "jarmon": {"name": "jarmon", "namespace": "", "module": "jarmon", "methods": {"downloadBinary": {"return": {"type": "Object", "description": "A deferred which will callback with an instance of\njavascriptrrd.BinaryFile"}, "params": [{"type": "String", "name": "url", "description": "  The url of the object to be downloaded"}], "description": "Download a binary file asynchronously using the jQuery.ajax function", "guessedname": "d", "guessedtype": "property"}, "localTimeFormatter": {"return": {"type": "String", "description": "The formatted datetime string"}, "params": [{"type": "Number", "name": "v", "description": "  The timestamp to be formatted"}, {"type": "Object", "name": "axis", "description": "  A hash containing information about the time axis"}], "description": "Copied from jquery.flot.js and modified to allow timezone\nadjustment."}}, "static": "", "file": "jarmon.js", "shortname": "jarmon", "description": "A namespace for Jarmon"}, "jarmon.ChartCoordinator": {"name": "jarmon.ChartCoordinator", "constructors": [{"params": [{"type": "Object", "name": "ui", "description": "  A one element jQuery containing an input form and\nplaceholders for the timeline and for the series of charts."}], "description": "Presents the user with a form and a timeline with which they can choose a\ntime range and co-ordinates the refreshing of a series of charts."}], "namespace": "", "module": "jarmon", "guessedname": "ChartCoordinator", "methods": {"init": {"description": "Reset all charts and the input form to the default time range - last hour"}, "update": {"description": "Grab the start and end time from the ui form, highlight the range on the\nrange timeline and set the time range of all the charts and redraw.", "guessedname": "self", "guessedtype": "property"}, "setTimeRange": {"params": [{"type": "Number", "name": "startTime", "description": "  The start timestamp"}, {"type": "Number", "name": "endTime", "description": "  The end timestamp"}], "description": "Set the start and end time fields in the form and trigger an update"}}, "file": "jarmon.js", "guessedtype": "function", "shortname": "jarmon.ChartCoordinator", "description": "Presents the user with a form and a timeline with which they can choose a\ntime range and co-ordinates the refreshing of a series of charts."}, "jarmon.Parallimiter": {"name": "jarmon.Parallimiter", "constructors": [{"params": [{"type": "Number", "name": "limit", "description": "  The maximum number of in progress calls"}], "description": "Limit the number of parallel async calls"}], "namespace": "", "module": "jarmon", "guessedname": "Parallimiter", "methods": {"addCallable": {"return": {"type": "Object", "description": "A Deferred which fires with the result of the callable\nwhen it is called."}, "params": [{"type": "Function", "name": "callable", "description": "  A function which returns a Deferred."}, {"type": "Array", "name": "args", "description": "  A list of arguments to pass to the callable"}], "description": "Add a function to be called when the number of in progress calls drops\nbelow the configured limit", "guessedname": "d", "guessedtype": "property"}}, "file": "jarmon.js", "guessedtype": "function", "shortname": "jarmon.Parallimiter", "properties": {"self": {"description": "When url cannot be found, the deferred should errback with status\n404.", "guessedname": "self", "guessedtype": "property"}}, "description": "Limit the number of parallel async calls"}, "jarmon.RrdChooser": {"name": "jarmon.RrdChooser", "constructors": [{"description": "Generate a form through which to choose a data source from a remote RRD file"}], "namespace": "", "module": "jarmon", "guessedname": "RrdChooser", "file": "jarmon.js", "guessedtype": "function", "shortname": "jarmon.RrdChooser", "properties": {"p": {"description": "Setup chart date range controls and all charts", "guessedname": "p", "guessedtype": "property"}}, "description": "Generate a form through which to choose a data source from a remote RRD file"}, "jarmon.RrdQueryRemote": {"name": "jarmon.RrdQueryRemote", "constructors": [{"params": [{"type": "String", "name": "url", "description": "  The url of a remote RRD file"}, {"type": "String", "name": "unit", "description": "  The unit suffix of this data eg 'bit/sec'"}, {"type": "Function", "name": "downloader", "description": "  A callable which returns a Deferred and calls\nback with a javascriptrrd.BinaryFile when it has downloaded."}, {"type": "Function", "name": "transformer", "description": "  A callable which performs a\ntranfsformation of the values returned from the RRD file."}], "description": "A wrapper around RrdQuery which provides asynchronous access to the data in a\nremote RRD file."}], "namespace": "", "module": "jarmon", "guessedname": "RrdQueryRemote", "methods": {"getData": {"return": {"type": "Object", "description": "A Deferred which calls back with a flot data series."}, "params": [{"type": "Number", "name": "startTime", "description": "  The start timestamp"}, {"type": "Number", "name": "endTime", "description": "  The end timestamp"}, {"type": "Variant", "name": "dsId", "description": "  identifier of the RRD datasource (string or number)"}], "description": "Return a Flot compatible data series asynchronously."}, "getDSNames": {"return": {"type": "Object", "description": "A Deferred which calls back with an array of DS names."}, "description": "Return a list of RRD Data Source names"}}, "file": "jarmon.js", "guessedtype": "function", "shortname": "jarmon.RrdQueryRemote", "description": "A wrapper around RrdQuery which provides asynchronous access to the data in a\nremote RRD file."}, "jarmon.RrdQueryDsProxy": {"name": "jarmon.RrdQueryDsProxy", "constructors": [{"params": [{"type": "Object", "name": "rrdQuery", "description": "  An RrdQueryRemote instance"}, {"type": "Variant", "name": "dsId", "description": "  identifier of the RRD datasource (string or number)"}], "description": "Wraps RrdQueryRemote to provide access to a different RRD DSs within a\nsingle RrdDataSource."}], "namespace": "", "module": "jarmon", "guessedname": "RrdQueryDsProxy", "methods": {"getData": {"return": {"type": "Object", "description": "A Deferred which calls back with a flot data series."}, "params": [{"type": "Number", "name": "startTime", "description": "  A unix timestamp marking the start time"}, {"type": "Number", "name": "endTime", "description": "  A unix timestamp marking the start time"}], "description": "Call I{RrdQueryRemote.getData} with a particular dsId"}}, "file": "jarmon.js", "guessedtype": "function", "shortname": "jarmon.RrdQueryDsProxy", "description": "Wraps RrdQueryRemote to provide access to a different RRD DSs within a\nsingle RrdDataSource."}, "jarmon.Chart": {"name": "jarmon.Chart", "constructors": [{"params": [{"type": "Object", "name": "template", "description": "  A jQuery containing a single element into which the\nchart will be drawn"}, {"type": "Object", "name": "options", "description": "  Flot options which control how the chart should be\ndrawn."}], "description": "A class for creating a Flot chart from a series of RRD Queries"}], "namespace": "", "module": "jarmon", "guessedname": "Chart", "methods": {"draw": {"return": {"type": "Object", "description": "A Deferred which calls back with the chart data when\nthe chart has been rendered."}, "description": "Draw the chart\nA 'chart_loading' event is triggered before the data is requested\nA 'chart_loaded' event is triggered when the chart has been drawn", "guessedname": "self", "guessedtype": "property"}, "setTimeRange": {"params": [{"type": "Number", "name": "startTime", "description": "  The start timestamp"}, {"type": "Number", "name": "endTime", "description": "  The end timestamp"}], "description": "Alter the time range of this chart and redraw", "guessedname": "startTime", "guessedtype": "property"}, "switchDataEnabled": {"params": [{"type": "String", "name": "label", "description": "  The label of the data source to be enabled /\ndisabled."}], "description": "Enable / Disable a single data source", "guessedname": "i", "guessedtype": "property"}, "addData": {"params": [{"type": "String", "name": "label", "description": "  The label for this data which will be shown in the\nchart legend"}, {"type": "String", "name": "db", "description": "  The url of the remote RRD database"}, {"type": "Boolean", "name": "enabled", "description": "  true if you want this data plotted on the chart,\nfalse if not."}], "description": "Add details of a remote RRD data source whose data will be added to this\nchart."}}, "file": "jarmon.js", "guessedtype": "function", "shortname": "jarmon.Chart", "description": "A class for creating a Flot chart from a series of RRD Queries"}}, "version": "11.8", "modules": {"jarmon": {"description": "Copyright (c) Richard Wall\nSee LICENSE for details.\nWrappers and convenience fuctions for working with the javascriptRRD, jQuery,\nand Flot charting packages.\nDesigned to work well with the RRD files generated by Collectd:\n- http://collectd.org/\nRequirements:\n- JavascriptRRD: http://javascriptrrd.sourceforge.net/\n- jQuery: http://jquery.com/\n- Flot: http://code.google.com/p/flot/", "submodules": [], "classlist": ["jarmon", "jarmon.RrdQuery", "jarmon.RrdQueryRemote", "jarmon.RrdQueryDsProxy", "jarmon.Chart", "jarmon.RrdChooser", "jarmon.ChartCoordinator", "jarmon.Parallimiter"], "filelist": ["jarmon.js", "jarmon.test.js"], "subdata": {}, "name": "jarmon"}}, "filemap": {"jarmon.test.js": {"classlist": [], "name": "jarmon.test.js", "module": "jarmon"}, "jarmon.js": {"classlist": ["jarmon", "jarmon.RrdQuery", "jarmon.RrdQueryRemote", "jarmon.RrdQueryDsProxy", "jarmon.Chart", "jarmon.RrdChooser", "jarmon.ChartCoordinator", "jarmon.Parallimiter"], "name": "jarmon.js", "module": "jarmon"}}}