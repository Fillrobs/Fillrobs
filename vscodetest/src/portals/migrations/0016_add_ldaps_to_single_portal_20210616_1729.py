# Generated by Django 2.2.16 on 2021-06-16 17:29

from django.db import migrations


class Migration(migrations.Migration):

    def add_ldaps_to_single_portal(apps, schema_editor):
        """
        If there is only one existing Portal on this instance, then associate any existing
        LDAPUtilities with it. This is our attempt to deal with/avoid fallout from a change
        in behavior that persisted for a few releases (9.4.-9.4.6) where a LDAP that is not
        associated with a Portal stopped being usable to login with. The fix moving forward
        is to allow setting Portals when creating LDAPUtilities, with the default behavior
        being to associate them with the Default or only Portal, so we try to mimic that here.
        The release notes will warn people that this could cause additional domains to
        become available for login, but the hope is that by limiting it to the case of a
        single Portal we're mostly only impacting new and Portal-naive customers.
        """
        PortalConfig = apps.get_model('portals', 'PortalConfig')
        LDAPUtility = apps.get_model('utilities', 'LDAPUtility')

        if PortalConfig.objects.count() == 1:
            # If they're all already associated with the Portal we can save ourselves some effort
            if LDAPUtility.objects.filter(portalconfig__isnull=True).exists():
                portal = PortalConfig.objects.first()
                portal.ldaps.set(LDAPUtility.objects.all())

    dependencies = [
        ('portals', '0015_set_global_id_for_portalconfig'),
        ('utilities', '0109_merge_20210527_1726')
    ]

    operations = [
        migrations.RunPython(add_ldaps_to_single_portal, migrations.RunPython.noop),
    ]
