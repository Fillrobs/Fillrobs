"""
WARNING: This script uses old-style roles and is incompatible with CB 7.2.

Creates many users, groups, servers, environments so that UI views may be
tested for their ability to scale to displaying many items.

The script expects to have RHs and PEs already available for associating with
new environments, so you should have loaded cb_objects or something similar.
"""
from __future__ import unicode_literals
from __future__ import print_function
from builtins import map
from builtins import range

from math import floor, log10
from random import choice as random_choice
from string import ascii_lowercase as letters

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User

from accounts.models import Group, GroupType, UserProfile
from infrastructure.models import Server, Environment
from resourcehandlers.models import ResourceHandler
from provisionengines.models import ProvisionEngine


def random_product(*args, **kwargs):
    """
    Random selection from itertools.product(*args, **kwargs)

    Code from http://docs.python.org/2/library/itertools.html#recipes
    """
    pools = list(map(tuple, args)) * kwargs.get("repeat", 1)
    return tuple(random_choice(pool) for pool in pools)


# a unique string that we add to the names of things that are generated by this
# invocation of the command in the hope that each invocation's genreated
# objects are unique.
# Birthday problem math says that with 26^4=456976 unique strings, we'd have to
# pick ~217 at random before we have a 5% chance of a collision. I'm ok with
# those odds.
unique = "".join(random_product(letters, repeat=4))


def gen_names(n, prefix=None):
    prefix = (prefix + "-") if prefix else ""

    # We format a format string that will display every number `i` with the
    # same width as the largest possible value for `i`, by prefixing the value
    # with zeroes as necessary. AKA 01, 02, ..., 49, 50.
    number_width = int(floor(log10(n)) + 1)
    format_string = "{}{{}}-{{:0{}d}}".format(prefix, number_width)

    for i in range(1, n + 1):
        yield format_string.format(unique, i)


def create_users(n):
    for name in gen_names(n):
        user = User(
            username="usr-" + name,
            first_name=name + "-fst",
            last_name=name + "-lst",
            email=name + "@example.com",
        )

        print(user)
        user.save()


def create_servers(n):
    owner_ids = UserProfile.objects.values_list("id", flat=True)
    group_ids = Group.objects.values_list("id", flat=True)
    environment_ids = Environment.objects.values_list("id", flat=True)
    rh_ids = ResourceHandler.objects.values_list("id", flat=True)

    for name in gen_names(n, prefix="svr"):
        server = Server(
            hostname=name,
            ip="127.0.0.1",
            mac="00:11:22:33:44:55",
            owner_id=random_choice(owner_ids),
            group_id=random_choice(group_ids),
            environment_id=random_choice(environment_ids),
            # lots of code assumes a server has an RH, so we give it one, even
            # it it doesn't make much sense (wrt. the environment, or actually
            # existing in the RH)
            resource_handler_id=random_choice(rh_ids),
        )

        print(server)
        server.save()


def create_groups(n):
    type_ids = GroupType.objects.values_list("id", flat=True)
    # we will expose all group permissions to these users, so that the groups
    # show up in the UI and can be manipulated
    users = UserProfile.objects.all()
    for name in gen_names(n, prefix="grp"):
        group = Group(name=name, type_id=random_choice(type_ids))

        group.save()

        group.requestors.add(*users)
        group.approvers.add(*users)
        group.user_admins.add(*users)
        group.viewers.add(*users)

        print(group)
        group.save()


def create_environments(n):
    rh_ids = ResourceHandler.objects.values_list("id", flat=True)
    pe_ids = ProvisionEngine.objects.values_list("id", flat=True)
    for name in gen_names(n, prefix="env"):
        environment = Environment(
            name=name,
            resource_handler_id=random_choice(rh_ids),
            provision_engine_id=random_choice(pe_ids),
        )

        print(environment)
        environment.save()


class Command(BaseCommand):
    def handle(self, *args, **options):
        create_users(500)
        create_groups(500)
        create_servers(1000)
        create_environments(200)
