# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-01-12 13:52
from __future__ import unicode_literals
import os

from django.conf import settings
from django.db import migrations


def update_rule_and_actions(apps, schema_editor):
    """
    Updating the auto-scaling rule to reference resources rather than services.
    It isn't entirely out-of-the-box, rather defined in a special
    initialize/cloud_bursting.py, but some customers may have already run that
    and have existing objects that need updating. In this case, updating
    everything here so that users don't have to perform that manual step again
    (even tho doing so could make some of the desired changes instead).
    """
    TriggerPoint = apps.get_model("cbhooks", "TriggerPoint")

    rule = TriggerPoint.objects.filter(name='check_services_for_scaling_conditions').first()
    if rule:
        rule.name = 'check_resources_for_scaling_conditions'
        rule.label = 'Check Resources for Scaling Conditions'
        rule.save()
        condition = rule.condition.cloudbolthook
        if condition:
            condition.name = 'Check Resources for Scaling Conditions'
            # Use logic similar to c2_wrapper to only set the module_file if
            # it's the same as the ootb_module_file, to avoid overwriting if
            # users have edited the code
            if condition.module_file == condition.ootb_module_file:
                condition.module_file = os.path.join(
                    settings.ROOTDIR, 'cbhooks/hookmodules/rules/conditions/check_resources_for_scaling_conditions.py')
            condition.ootb_module_file = os.path.join(
                settings.ROOTDIR, 'cbhooks/hookmodules/rules/conditions/check_resources_for_scaling_conditions.py')
            condition.save()
        # The "then" action actually consists of 2 layers: a HookPointAction and
        # its OrchestrationHook, both originally with the same name, but the
        # base action is the same as the one that was already updated in 0028
        then_action_hpa = rule.hookpointaction_set.first()
        if then_action_hpa:
            then_action_hpa.name = 'Scale Resource'
            then_action_hpa.save()


class Migration(migrations.Migration):

    dependencies = [
        ('cbhooks', '0028_scale_service_action_becomes_scale_resource_20180111_1942'),
    ]

    operations = [
        migrations.RunPython(update_rule_and_actions,
                             migrations.RunPython.noop),
    ]
